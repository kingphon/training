// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserBankCards(t *testing.T) {
	t.Parallel()

	query := UserBankCards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserBankCardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBankCardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserBankCards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBankCardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBankCardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBankCardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserBankCardExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserBankCard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserBankCardExists to return true, but got false.")
	}
}

func testUserBankCardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userBankCardFound, err := FindUserBankCard(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userBankCardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserBankCardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserBankCards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserBankCardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserBankCards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserBankCardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userBankCardOne := &UserBankCard{}
	userBankCardTwo := &UserBankCard{}
	if err = randomize.Struct(seed, userBankCardOne, userBankCardDBTypes, false, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}
	if err = randomize.Struct(seed, userBankCardTwo, userBankCardDBTypes, false, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBankCardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBankCardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBankCards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserBankCardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userBankCardOne := &UserBankCard{}
	userBankCardTwo := &UserBankCard{}
	if err = randomize.Struct(seed, userBankCardOne, userBankCardDBTypes, false, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}
	if err = randomize.Struct(seed, userBankCardTwo, userBankCardDBTypes, false, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBankCardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBankCardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userBankCardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func userBankCardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBankCard) error {
	*o = UserBankCard{}
	return nil
}

func testUserBankCardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserBankCard{}
	o := &UserBankCard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userBankCardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserBankCard object: %s", err)
	}

	AddUserBankCardHook(boil.BeforeInsertHook, userBankCardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userBankCardBeforeInsertHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.AfterInsertHook, userBankCardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userBankCardAfterInsertHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.AfterSelectHook, userBankCardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userBankCardAfterSelectHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.BeforeUpdateHook, userBankCardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userBankCardBeforeUpdateHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.AfterUpdateHook, userBankCardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userBankCardAfterUpdateHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.BeforeDeleteHook, userBankCardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userBankCardBeforeDeleteHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.AfterDeleteHook, userBankCardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userBankCardAfterDeleteHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.BeforeUpsertHook, userBankCardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userBankCardBeforeUpsertHooks = []UserBankCardHook{}

	AddUserBankCardHook(boil.AfterUpsertHook, userBankCardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userBankCardAfterUpsertHooks = []UserBankCardHook{}
}

func testUserBankCardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBankCardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userBankCardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBankCardToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserBankCard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBankCardDBTypes, false, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserBankCardSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserBankCard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserBankCardToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBankCard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankCardDBTypes, false, strmangle.SetComplement(userBankCardPrimaryKeyColumns, userBankCardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserBankCards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserBankCardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBankCardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBankCardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBankCardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBankCards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userBankCardDBTypes = map[string]string{`ID`: `text`, `Number`: `text`, `UserID`: `text`, `IsDefault`: `boolean`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testUserBankCardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userBankCardAllColumns) == len(userBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserBankCardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userBankCardAllColumns) == len(userBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBankCard{}
	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBankCardDBTypes, true, userBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userBankCardAllColumns, userBankCardPrimaryKeyColumns) {
		fields = userBankCardAllColumns
	} else {
		fields = strmangle.SetComplement(
			userBankCardAllColumns,
			userBankCardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserBankCardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserBankCardsUpsert(t *testing.T) {
	t.Parallel()

	if len(userBankCardAllColumns) == len(userBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserBankCard{}
	if err = randomize.Struct(seed, &o, userBankCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBankCard: %s", err)
	}

	count, err := UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userBankCardDBTypes, false, userBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBankCard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBankCard: %s", err)
	}

	count, err = UserBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
