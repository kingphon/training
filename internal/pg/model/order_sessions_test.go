// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderSessions(t *testing.T) {
	t.Parallel()

	query := OrderSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderSessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderSessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderSessionExists to return true, but got false.")
	}
}

func testOrderSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderSessionFound, err := FindOrderSession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderSessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderSessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderSessionOne := &OrderSession{}
	orderSessionTwo := &OrderSession{}
	if err = randomize.Struct(seed, orderSessionOne, orderSessionDBTypes, false, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}
	if err = randomize.Struct(seed, orderSessionTwo, orderSessionDBTypes, false, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderSessionOne := &OrderSession{}
	orderSessionTwo := &OrderSession{}
	if err = randomize.Struct(seed, orderSessionOne, orderSessionDBTypes, false, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}
	if err = randomize.Struct(seed, orderSessionTwo, orderSessionDBTypes, false, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderSessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func orderSessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderSession) error {
	*o = OrderSession{}
	return nil
}

func testOrderSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderSession{}
	o := &OrderSession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderSession object: %s", err)
	}

	AddOrderSessionHook(boil.BeforeInsertHook, orderSessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderSessionBeforeInsertHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.AfterInsertHook, orderSessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderSessionAfterInsertHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.AfterSelectHook, orderSessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderSessionAfterSelectHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.BeforeUpdateHook, orderSessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderSessionBeforeUpdateHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.AfterUpdateHook, orderSessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderSessionAfterUpdateHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.BeforeDeleteHook, orderSessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderSessionBeforeDeleteHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.AfterDeleteHook, orderSessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderSessionAfterDeleteHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.BeforeUpsertHook, orderSessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderSessionBeforeUpsertHooks = []OrderSessionHook{}

	AddOrderSessionHook(boil.AfterUpsertHook, orderSessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderSessionAfterUpsertHooks = []OrderSessionHook{}
}

func testOrderSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderSessionDBTypes = map[string]string{`ID`: `text`, `OrderItems`: `jsonb`, `UserID`: `text`, `DeliverySessionID`: `text`, `Amount`: `numeric`, `CreatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testOrderSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderSessionAllColumns) == len(orderSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderSessionAllColumns) == len(orderSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderSession{}
	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderSessionDBTypes, true, orderSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderSessionAllColumns, orderSessionPrimaryKeyColumns) {
		fields = orderSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderSessionAllColumns,
			orderSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(orderSessionAllColumns) == len(orderSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderSession{}
	if err = randomize.Struct(seed, &o, orderSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderSession: %s", err)
	}

	count, err := OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderSessionDBTypes, false, orderSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderSession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderSession: %s", err)
	}

	count, err = OrderSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
