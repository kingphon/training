// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeliverySession is an object representing the database table.
type DeliverySession struct {
	ID           null.String     `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Code         null.String     `boil:"code" json:"code" toml:"code" yaml:"code"`
	Title        null.String     `boil:"title" json:"title" toml:"title" yaml:"title"`
	ShipFee      decimal.Decimal `boil:"ship_fee" json:"ship_fee" toml:"ship_fee" yaml:"ship_fee"`
	Status       null.String     `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserID       null.String     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EstimateDate null.Time       `boil:"estimate_date" json:"estimate_date" toml:"estimate_date" yaml:"estimate_date"`
	WarehouseID  null.String     `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	LocationID   null.String     `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	CreatedAt    null.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *deliverySessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliverySessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliverySessionColumns = struct {
	ID           string
	Code         string
	Title        string
	ShipFee      string
	Status       string
	UserID       string
	EstimateDate string
	WarehouseID  string
	LocationID   string
	CreatedAt    string
}{
	ID:           "_id",
	Code:         "code",
	Title:        "title",
	ShipFee:      "ship_fee",
	Status:       "status",
	UserID:       "user_id",
	EstimateDate: "estimate_date",
	WarehouseID:  "warehouse_id",
	LocationID:   "location_id",
	CreatedAt:    "created_at",
}

var DeliverySessionTableColumns = struct {
	ID           string
	Code         string
	Title        string
	ShipFee      string
	Status       string
	UserID       string
	EstimateDate string
	WarehouseID  string
	LocationID   string
	CreatedAt    string
}{
	ID:           "delivery_sessions._id",
	Code:         "delivery_sessions.code",
	Title:        "delivery_sessions.title",
	ShipFee:      "delivery_sessions.ship_fee",
	Status:       "delivery_sessions.status",
	UserID:       "delivery_sessions.user_id",
	EstimateDate: "delivery_sessions.estimate_date",
	WarehouseID:  "delivery_sessions.warehouse_id",
	LocationID:   "delivery_sessions.location_id",
	CreatedAt:    "delivery_sessions.created_at",
}

// Generated where

var DeliverySessionWhere = struct {
	ID           whereHelpernull_String
	Code         whereHelpernull_String
	Title        whereHelpernull_String
	ShipFee      whereHelperdecimal_Decimal
	Status       whereHelpernull_String
	UserID       whereHelpernull_String
	EstimateDate whereHelpernull_Time
	WarehouseID  whereHelpernull_String
	LocationID   whereHelpernull_String
	CreatedAt    whereHelpernull_Time
}{
	ID:           whereHelpernull_String{field: "\"delivery_sessions\".\"_id\""},
	Code:         whereHelpernull_String{field: "\"delivery_sessions\".\"code\""},
	Title:        whereHelpernull_String{field: "\"delivery_sessions\".\"title\""},
	ShipFee:      whereHelperdecimal_Decimal{field: "\"delivery_sessions\".\"ship_fee\""},
	Status:       whereHelpernull_String{field: "\"delivery_sessions\".\"status\""},
	UserID:       whereHelpernull_String{field: "\"delivery_sessions\".\"user_id\""},
	EstimateDate: whereHelpernull_Time{field: "\"delivery_sessions\".\"estimate_date\""},
	WarehouseID:  whereHelpernull_String{field: "\"delivery_sessions\".\"warehouse_id\""},
	LocationID:   whereHelpernull_String{field: "\"delivery_sessions\".\"location_id\""},
	CreatedAt:    whereHelpernull_Time{field: "\"delivery_sessions\".\"created_at\""},
}

// DeliverySessionRels is where relationship names are stored.
var DeliverySessionRels = struct {
}{}

// deliverySessionR is where relationships are stored.
type deliverySessionR struct {
}

// NewStruct creates a new relationship struct
func (*deliverySessionR) NewStruct() *deliverySessionR {
	return &deliverySessionR{}
}

// deliverySessionL is where Load methods for each relationship are stored.
type deliverySessionL struct{}

var (
	deliverySessionAllColumns            = []string{"_id", "code", "title", "ship_fee", "status", "user_id", "estimate_date", "warehouse_id", "location_id", "created_at"}
	deliverySessionColumnsWithoutDefault = []string{"_id", "code", "title", "ship_fee", "status", "user_id", "estimate_date", "warehouse_id", "location_id", "created_at"}
	deliverySessionColumnsWithDefault    = []string{}
	deliverySessionPrimaryKeyColumns     = []string{"_id"}
	deliverySessionGeneratedColumns      = []string{}
)

type (
	// DeliverySessionSlice is an alias for a slice of pointers to DeliverySession.
	// This should almost always be used instead of []DeliverySession.
	DeliverySessionSlice []*DeliverySession
	// DeliverySessionHook is the signature for custom DeliverySession hook methods
	DeliverySessionHook func(context.Context, boil.ContextExecutor, *DeliverySession) error

	deliverySessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliverySessionType                 = reflect.TypeOf(&DeliverySession{})
	deliverySessionMapping              = queries.MakeStructMapping(deliverySessionType)
	deliverySessionPrimaryKeyMapping, _ = queries.BindMapping(deliverySessionType, deliverySessionMapping, deliverySessionPrimaryKeyColumns)
	deliverySessionInsertCacheMut       sync.RWMutex
	deliverySessionInsertCache          = make(map[string]insertCache)
	deliverySessionUpdateCacheMut       sync.RWMutex
	deliverySessionUpdateCache          = make(map[string]updateCache)
	deliverySessionUpsertCacheMut       sync.RWMutex
	deliverySessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliverySessionAfterSelectMu sync.Mutex
var deliverySessionAfterSelectHooks []DeliverySessionHook

var deliverySessionBeforeInsertMu sync.Mutex
var deliverySessionBeforeInsertHooks []DeliverySessionHook
var deliverySessionAfterInsertMu sync.Mutex
var deliverySessionAfterInsertHooks []DeliverySessionHook

var deliverySessionBeforeUpdateMu sync.Mutex
var deliverySessionBeforeUpdateHooks []DeliverySessionHook
var deliverySessionAfterUpdateMu sync.Mutex
var deliverySessionAfterUpdateHooks []DeliverySessionHook

var deliverySessionBeforeDeleteMu sync.Mutex
var deliverySessionBeforeDeleteHooks []DeliverySessionHook
var deliverySessionAfterDeleteMu sync.Mutex
var deliverySessionAfterDeleteHooks []DeliverySessionHook

var deliverySessionBeforeUpsertMu sync.Mutex
var deliverySessionBeforeUpsertHooks []DeliverySessionHook
var deliverySessionAfterUpsertMu sync.Mutex
var deliverySessionAfterUpsertHooks []DeliverySessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeliverySession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeliverySession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeliverySession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeliverySession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeliverySession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeliverySession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeliverySession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeliverySession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeliverySession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliverySessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliverySessionHook registers your hook function for all future operations.
func AddDeliverySessionHook(hookPoint boil.HookPoint, deliverySessionHook DeliverySessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliverySessionAfterSelectMu.Lock()
		deliverySessionAfterSelectHooks = append(deliverySessionAfterSelectHooks, deliverySessionHook)
		deliverySessionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliverySessionBeforeInsertMu.Lock()
		deliverySessionBeforeInsertHooks = append(deliverySessionBeforeInsertHooks, deliverySessionHook)
		deliverySessionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliverySessionAfterInsertMu.Lock()
		deliverySessionAfterInsertHooks = append(deliverySessionAfterInsertHooks, deliverySessionHook)
		deliverySessionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliverySessionBeforeUpdateMu.Lock()
		deliverySessionBeforeUpdateHooks = append(deliverySessionBeforeUpdateHooks, deliverySessionHook)
		deliverySessionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliverySessionAfterUpdateMu.Lock()
		deliverySessionAfterUpdateHooks = append(deliverySessionAfterUpdateHooks, deliverySessionHook)
		deliverySessionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliverySessionBeforeDeleteMu.Lock()
		deliverySessionBeforeDeleteHooks = append(deliverySessionBeforeDeleteHooks, deliverySessionHook)
		deliverySessionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliverySessionAfterDeleteMu.Lock()
		deliverySessionAfterDeleteHooks = append(deliverySessionAfterDeleteHooks, deliverySessionHook)
		deliverySessionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliverySessionBeforeUpsertMu.Lock()
		deliverySessionBeforeUpsertHooks = append(deliverySessionBeforeUpsertHooks, deliverySessionHook)
		deliverySessionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliverySessionAfterUpsertMu.Lock()
		deliverySessionAfterUpsertHooks = append(deliverySessionAfterUpsertHooks, deliverySessionHook)
		deliverySessionAfterUpsertMu.Unlock()
	}
}

// One returns a single deliverySession record from the query.
func (q deliverySessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliverySession, error) {
	o := &DeliverySession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for delivery_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeliverySession records from the query.
func (q deliverySessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliverySessionSlice, error) {
	var o []*DeliverySession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to DeliverySession slice")
	}

	if len(deliverySessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeliverySession records in the query.
func (q deliverySessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count delivery_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliverySessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if delivery_sessions exists")
	}

	return count > 0, nil
}

// DeliverySessions retrieves all the records using an executor.
func DeliverySessions(mods ...qm.QueryMod) deliverySessionQuery {
	mods = append(mods, qm.From("\"delivery_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delivery_sessions\".*"})
	}

	return deliverySessionQuery{q}
}

// FindDeliverySession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliverySession(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*DeliverySession, error) {
	deliverySessionObj := &DeliverySession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delivery_sessions\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliverySessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from delivery_sessions")
	}

	if err = deliverySessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliverySessionObj, err
	}

	return deliverySessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliverySession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no delivery_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliverySessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliverySessionInsertCacheMut.RLock()
	cache, cached := deliverySessionInsertCache[key]
	deliverySessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliverySessionAllColumns,
			deliverySessionColumnsWithDefault,
			deliverySessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliverySessionType, deliverySessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliverySessionType, deliverySessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delivery_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delivery_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into delivery_sessions")
	}

	if !cached {
		deliverySessionInsertCacheMut.Lock()
		deliverySessionInsertCache[key] = cache
		deliverySessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeliverySession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliverySession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliverySessionUpdateCacheMut.RLock()
	cache, cached := deliverySessionUpdateCache[key]
	deliverySessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliverySessionAllColumns,
			deliverySessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update delivery_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delivery_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliverySessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliverySessionType, deliverySessionMapping, append(wl, deliverySessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update delivery_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for delivery_sessions")
	}

	if !cached {
		deliverySessionUpdateCacheMut.Lock()
		deliverySessionUpdateCache[key] = cache
		deliverySessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliverySessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for delivery_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for delivery_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliverySessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliverySessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delivery_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliverySessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in deliverySession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all deliverySession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliverySession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no delivery_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliverySessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliverySessionUpsertCacheMut.RLock()
	cache, cached := deliverySessionUpsertCache[key]
	deliverySessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliverySessionAllColumns,
			deliverySessionColumnsWithDefault,
			deliverySessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliverySessionAllColumns,
			deliverySessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert delivery_sessions, could not build update column list")
		}

		ret := strmangle.SetComplement(deliverySessionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliverySessionPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert delivery_sessions, could not build conflict column list")
			}

			conflict = make([]string, len(deliverySessionPrimaryKeyColumns))
			copy(conflict, deliverySessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delivery_sessions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliverySessionType, deliverySessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliverySessionType, deliverySessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert delivery_sessions")
	}

	if !cached {
		deliverySessionUpsertCacheMut.Lock()
		deliverySessionUpsertCache[key] = cache
		deliverySessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeliverySession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliverySession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no DeliverySession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliverySessionPrimaryKeyMapping)
	sql := "DELETE FROM \"delivery_sessions\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from delivery_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for delivery_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliverySessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no deliverySessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from delivery_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for delivery_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliverySessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliverySessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliverySessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delivery_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliverySessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from deliverySession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for delivery_sessions")
	}

	if len(deliverySessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliverySession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliverySession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliverySessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliverySessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delivery_sessions\".* FROM \"delivery_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliverySessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in DeliverySessionSlice")
	}

	*o = slice

	return nil
}

// DeliverySessionExists checks if the DeliverySession row exists.
func DeliverySessionExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delivery_sessions\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if delivery_sessions exists")
	}

	return exists, nil
}

// Exists checks if the DeliverySession row exists.
func (o *DeliverySession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliverySessionExists(ctx, exec, o.ID)
}
