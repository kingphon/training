// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeliverySessions(t *testing.T) {
	t.Parallel()

	query := DeliverySessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeliverySessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliverySessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeliverySessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliverySessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliverySessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeliverySessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeliverySessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeliverySession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeliverySessionExists to return true, but got false.")
	}
}

func testDeliverySessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deliverySessionFound, err := FindDeliverySession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deliverySessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeliverySessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeliverySessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeliverySessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeliverySessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeliverySessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deliverySessionOne := &DeliverySession{}
	deliverySessionTwo := &DeliverySession{}
	if err = randomize.Struct(seed, deliverySessionOne, deliverySessionDBTypes, false, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}
	if err = randomize.Struct(seed, deliverySessionTwo, deliverySessionDBTypes, false, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliverySessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliverySessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliverySessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeliverySessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deliverySessionOne := &DeliverySession{}
	deliverySessionTwo := &DeliverySession{}
	if err = randomize.Struct(seed, deliverySessionOne, deliverySessionDBTypes, false, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}
	if err = randomize.Struct(seed, deliverySessionTwo, deliverySessionDBTypes, false, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deliverySessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deliverySessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deliverySessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func deliverySessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeliverySession) error {
	*o = DeliverySession{}
	return nil
}

func testDeliverySessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeliverySession{}
	o := &DeliverySession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeliverySession object: %s", err)
	}

	AddDeliverySessionHook(boil.BeforeInsertHook, deliverySessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deliverySessionBeforeInsertHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.AfterInsertHook, deliverySessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deliverySessionAfterInsertHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.AfterSelectHook, deliverySessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deliverySessionAfterSelectHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.BeforeUpdateHook, deliverySessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deliverySessionBeforeUpdateHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.AfterUpdateHook, deliverySessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deliverySessionAfterUpdateHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.BeforeDeleteHook, deliverySessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deliverySessionBeforeDeleteHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.AfterDeleteHook, deliverySessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deliverySessionAfterDeleteHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.BeforeUpsertHook, deliverySessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deliverySessionBeforeUpsertHooks = []DeliverySessionHook{}

	AddDeliverySessionHook(boil.AfterUpsertHook, deliverySessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deliverySessionAfterUpsertHooks = []DeliverySessionHook{}
}

func testDeliverySessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliverySessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deliverySessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeliverySessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliverySessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeliverySessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeliverySessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeliverySessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deliverySessionDBTypes = map[string]string{`ID`: `text`, `Code`: `text`, `Title`: `text`, `ShipFee`: `numeric`, `Status`: `text`, `UserID`: `text`, `EstimateDate`: `timestamp with time zone`, `WarehouseID`: `text`, `LocationID`: `text`, `CreatedAt`: `timestamp with time zone`}
	_                      = bytes.MinRead
)

func testDeliverySessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deliverySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deliverySessionAllColumns) == len(deliverySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeliverySessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deliverySessionAllColumns) == len(deliverySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeliverySession{}
	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deliverySessionDBTypes, true, deliverySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deliverySessionAllColumns, deliverySessionPrimaryKeyColumns) {
		fields = deliverySessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			deliverySessionAllColumns,
			deliverySessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeliverySessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeliverySessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(deliverySessionAllColumns) == len(deliverySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeliverySession{}
	if err = randomize.Struct(seed, &o, deliverySessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliverySession: %s", err)
	}

	count, err := DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deliverySessionDBTypes, false, deliverySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeliverySession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeliverySession: %s", err)
	}

	count, err = DeliverySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
