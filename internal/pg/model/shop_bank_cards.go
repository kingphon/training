// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopBankCard is an object representing the database table.
type ShopBankCard struct {
	ID        null.String `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Number    null.String `boil:"number" json:"number" toml:"number" yaml:"number"`
	ShopID    null.String `boil:"shop_id" json:"shop_id" toml:"shop_id" yaml:"shop_id"`
	IsDefault null.Bool   `boil:"is_default" json:"is_default,omitempty" toml:"is_default" yaml:"is_default,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *shopBankCardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopBankCardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopBankCardColumns = struct {
	ID        string
	Number    string
	ShopID    string
	IsDefault string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "_id",
	Number:    "number",
	ShopID:    "shop_id",
	IsDefault: "is_default",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ShopBankCardTableColumns = struct {
	ID        string
	Number    string
	ShopID    string
	IsDefault string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "shop_bank_cards._id",
	Number:    "shop_bank_cards.number",
	ShopID:    "shop_bank_cards.shop_id",
	IsDefault: "shop_bank_cards.is_default",
	CreatedAt: "shop_bank_cards.created_at",
	UpdatedAt: "shop_bank_cards.updated_at",
}

// Generated where

var ShopBankCardWhere = struct {
	ID        whereHelpernull_String
	Number    whereHelpernull_String
	ShopID    whereHelpernull_String
	IsDefault whereHelpernull_Bool
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelpernull_String{field: "\"shop_bank_cards\".\"_id\""},
	Number:    whereHelpernull_String{field: "\"shop_bank_cards\".\"number\""},
	ShopID:    whereHelpernull_String{field: "\"shop_bank_cards\".\"shop_id\""},
	IsDefault: whereHelpernull_Bool{field: "\"shop_bank_cards\".\"is_default\""},
	CreatedAt: whereHelpernull_Time{field: "\"shop_bank_cards\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"shop_bank_cards\".\"updated_at\""},
}

// ShopBankCardRels is where relationship names are stored.
var ShopBankCardRels = struct {
	Shop string
}{
	Shop: "Shop",
}

// shopBankCardR is where relationships are stored.
type shopBankCardR struct {
	Shop *Shop `boil:"Shop" json:"Shop" toml:"Shop" yaml:"Shop"`
}

// NewStruct creates a new relationship struct
func (*shopBankCardR) NewStruct() *shopBankCardR {
	return &shopBankCardR{}
}

func (r *shopBankCardR) GetShop() *Shop {
	if r == nil {
		return nil
	}
	return r.Shop
}

// shopBankCardL is where Load methods for each relationship are stored.
type shopBankCardL struct{}

var (
	shopBankCardAllColumns            = []string{"_id", "number", "shop_id", "is_default", "created_at", "updated_at"}
	shopBankCardColumnsWithoutDefault = []string{"_id", "number", "shop_id", "created_at", "updated_at"}
	shopBankCardColumnsWithDefault    = []string{"is_default"}
	shopBankCardPrimaryKeyColumns     = []string{"_id"}
	shopBankCardGeneratedColumns      = []string{}
)

type (
	// ShopBankCardSlice is an alias for a slice of pointers to ShopBankCard.
	// This should almost always be used instead of []ShopBankCard.
	ShopBankCardSlice []*ShopBankCard
	// ShopBankCardHook is the signature for custom ShopBankCard hook methods
	ShopBankCardHook func(context.Context, boil.ContextExecutor, *ShopBankCard) error

	shopBankCardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopBankCardType                 = reflect.TypeOf(&ShopBankCard{})
	shopBankCardMapping              = queries.MakeStructMapping(shopBankCardType)
	shopBankCardPrimaryKeyMapping, _ = queries.BindMapping(shopBankCardType, shopBankCardMapping, shopBankCardPrimaryKeyColumns)
	shopBankCardInsertCacheMut       sync.RWMutex
	shopBankCardInsertCache          = make(map[string]insertCache)
	shopBankCardUpdateCacheMut       sync.RWMutex
	shopBankCardUpdateCache          = make(map[string]updateCache)
	shopBankCardUpsertCacheMut       sync.RWMutex
	shopBankCardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopBankCardAfterSelectMu sync.Mutex
var shopBankCardAfterSelectHooks []ShopBankCardHook

var shopBankCardBeforeInsertMu sync.Mutex
var shopBankCardBeforeInsertHooks []ShopBankCardHook
var shopBankCardAfterInsertMu sync.Mutex
var shopBankCardAfterInsertHooks []ShopBankCardHook

var shopBankCardBeforeUpdateMu sync.Mutex
var shopBankCardBeforeUpdateHooks []ShopBankCardHook
var shopBankCardAfterUpdateMu sync.Mutex
var shopBankCardAfterUpdateHooks []ShopBankCardHook

var shopBankCardBeforeDeleteMu sync.Mutex
var shopBankCardBeforeDeleteHooks []ShopBankCardHook
var shopBankCardAfterDeleteMu sync.Mutex
var shopBankCardAfterDeleteHooks []ShopBankCardHook

var shopBankCardBeforeUpsertMu sync.Mutex
var shopBankCardBeforeUpsertHooks []ShopBankCardHook
var shopBankCardAfterUpsertMu sync.Mutex
var shopBankCardAfterUpsertHooks []ShopBankCardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopBankCard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopBankCard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopBankCard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopBankCard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopBankCard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopBankCard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopBankCard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopBankCard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopBankCard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBankCardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopBankCardHook registers your hook function for all future operations.
func AddShopBankCardHook(hookPoint boil.HookPoint, shopBankCardHook ShopBankCardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shopBankCardAfterSelectMu.Lock()
		shopBankCardAfterSelectHooks = append(shopBankCardAfterSelectHooks, shopBankCardHook)
		shopBankCardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shopBankCardBeforeInsertMu.Lock()
		shopBankCardBeforeInsertHooks = append(shopBankCardBeforeInsertHooks, shopBankCardHook)
		shopBankCardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shopBankCardAfterInsertMu.Lock()
		shopBankCardAfterInsertHooks = append(shopBankCardAfterInsertHooks, shopBankCardHook)
		shopBankCardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shopBankCardBeforeUpdateMu.Lock()
		shopBankCardBeforeUpdateHooks = append(shopBankCardBeforeUpdateHooks, shopBankCardHook)
		shopBankCardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shopBankCardAfterUpdateMu.Lock()
		shopBankCardAfterUpdateHooks = append(shopBankCardAfterUpdateHooks, shopBankCardHook)
		shopBankCardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shopBankCardBeforeDeleteMu.Lock()
		shopBankCardBeforeDeleteHooks = append(shopBankCardBeforeDeleteHooks, shopBankCardHook)
		shopBankCardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shopBankCardAfterDeleteMu.Lock()
		shopBankCardAfterDeleteHooks = append(shopBankCardAfterDeleteHooks, shopBankCardHook)
		shopBankCardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shopBankCardBeforeUpsertMu.Lock()
		shopBankCardBeforeUpsertHooks = append(shopBankCardBeforeUpsertHooks, shopBankCardHook)
		shopBankCardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shopBankCardAfterUpsertMu.Lock()
		shopBankCardAfterUpsertHooks = append(shopBankCardAfterUpsertHooks, shopBankCardHook)
		shopBankCardAfterUpsertMu.Unlock()
	}
}

// One returns a single shopBankCard record from the query.
func (q shopBankCardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopBankCard, error) {
	o := &ShopBankCard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for shop_bank_cards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopBankCard records from the query.
func (q shopBankCardQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopBankCardSlice, error) {
	var o []*ShopBankCard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to ShopBankCard slice")
	}

	if len(shopBankCardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopBankCard records in the query.
func (q shopBankCardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count shop_bank_cards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopBankCardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if shop_bank_cards exists")
	}

	return count > 0, nil
}

// Shop pointed to by the foreign key.
func (o *ShopBankCard) Shop(mods ...qm.QueryMod) shopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.ShopID),
	}

	queryMods = append(queryMods, mods...)

	return Shops(queryMods...)
}

// LoadShop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopBankCardL) LoadShop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopBankCard interface{}, mods queries.Applicator) error {
	var slice []*ShopBankCard
	var object *ShopBankCard

	if singular {
		var ok bool
		object, ok = maybeShopBankCard.(*ShopBankCard)
		if !ok {
			object = new(ShopBankCard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShopBankCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShopBankCard))
			}
		}
	} else {
		s, ok := maybeShopBankCard.(*[]*ShopBankCard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShopBankCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShopBankCard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shopBankCardR{}
		}
		if !queries.IsNil(object.ShopID) {
			args[object.ShopID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopBankCardR{}
			}

			if !queries.IsNil(obj.ShopID) {
				args[obj.ShopID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shops`),
		qm.WhereIn(`shops._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shop")
	}

	var resultSlice []*Shop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shops")
	}

	if len(shopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shop = foreign
		if foreign.R == nil {
			foreign.R = &shopR{}
		}
		foreign.R.ShopBankCards = append(foreign.R.ShopBankCards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShopID, foreign.ID) {
				local.R.Shop = foreign
				if foreign.R == nil {
					foreign.R = &shopR{}
				}
				foreign.R.ShopBankCards = append(foreign.R.ShopBankCards, local)
				break
			}
		}
	}

	return nil
}

// SetShop of the shopBankCard to the related item.
// Sets o.R.Shop to related.
// Adds o to related.R.ShopBankCards.
func (o *ShopBankCard) SetShop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shop_bank_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shop_id"}),
		strmangle.WhereClause("\"", "\"", 2, shopBankCardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShopID, related.ID)
	if o.R == nil {
		o.R = &shopBankCardR{
			Shop: related,
		}
	} else {
		o.R.Shop = related
	}

	if related.R == nil {
		related.R = &shopR{
			ShopBankCards: ShopBankCardSlice{o},
		}
	} else {
		related.R.ShopBankCards = append(related.R.ShopBankCards, o)
	}

	return nil
}

// ShopBankCards retrieves all the records using an executor.
func ShopBankCards(mods ...qm.QueryMod) shopBankCardQuery {
	mods = append(mods, qm.From("\"shop_bank_cards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shop_bank_cards\".*"})
	}

	return shopBankCardQuery{q}
}

// FindShopBankCard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopBankCard(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*ShopBankCard, error) {
	shopBankCardObj := &ShopBankCard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_bank_cards\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopBankCardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from shop_bank_cards")
	}

	if err = shopBankCardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopBankCardObj, err
	}

	return shopBankCardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopBankCard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no shop_bank_cards provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopBankCardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopBankCardInsertCacheMut.RLock()
	cache, cached := shopBankCardInsertCache[key]
	shopBankCardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopBankCardAllColumns,
			shopBankCardColumnsWithDefault,
			shopBankCardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopBankCardType, shopBankCardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopBankCardType, shopBankCardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_bank_cards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_bank_cards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into shop_bank_cards")
	}

	if !cached {
		shopBankCardInsertCacheMut.Lock()
		shopBankCardInsertCache[key] = cache
		shopBankCardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopBankCard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopBankCard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopBankCardUpdateCacheMut.RLock()
	cache, cached := shopBankCardUpdateCache[key]
	shopBankCardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopBankCardAllColumns,
			shopBankCardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update shop_bank_cards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_bank_cards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopBankCardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopBankCardType, shopBankCardMapping, append(wl, shopBankCardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update shop_bank_cards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for shop_bank_cards")
	}

	if !cached {
		shopBankCardUpdateCacheMut.Lock()
		shopBankCardUpdateCache[key] = cache
		shopBankCardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopBankCardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for shop_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for shop_bank_cards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopBankCardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_bank_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopBankCardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in shopBankCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all shopBankCard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopBankCard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no shop_bank_cards provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopBankCardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopBankCardUpsertCacheMut.RLock()
	cache, cached := shopBankCardUpsertCache[key]
	shopBankCardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shopBankCardAllColumns,
			shopBankCardColumnsWithDefault,
			shopBankCardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shopBankCardAllColumns,
			shopBankCardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert shop_bank_cards, could not build update column list")
		}

		ret := strmangle.SetComplement(shopBankCardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shopBankCardPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert shop_bank_cards, could not build conflict column list")
			}

			conflict = make([]string, len(shopBankCardPrimaryKeyColumns))
			copy(conflict, shopBankCardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shop_bank_cards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shopBankCardType, shopBankCardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopBankCardType, shopBankCardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert shop_bank_cards")
	}

	if !cached {
		shopBankCardUpsertCacheMut.Lock()
		shopBankCardUpsertCache[key] = cache
		shopBankCardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopBankCard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopBankCard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no ShopBankCard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopBankCardPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_bank_cards\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from shop_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for shop_bank_cards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopBankCardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no shopBankCardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from shop_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for shop_bank_cards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopBankCardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopBankCardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_bank_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopBankCardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from shopBankCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for shop_bank_cards")
	}

	if len(shopBankCardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopBankCard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopBankCard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopBankCardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopBankCardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_bank_cards\".* FROM \"shop_bank_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopBankCardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in ShopBankCardSlice")
	}

	*o = slice

	return nil
}

// ShopBankCardExists checks if the ShopBankCard row exists.
func ShopBankCardExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_bank_cards\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if shop_bank_cards exists")
	}

	return exists, nil
}

// Exists checks if the ShopBankCard row exists.
func (o *ShopBankCard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShopBankCardExists(ctx, exec, o.ID)
}
