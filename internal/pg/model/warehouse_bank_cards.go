// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WarehouseBankCard is an object representing the database table.
type WarehouseBankCard struct {
	ID          null.String `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Number      null.String `boil:"number" json:"number" toml:"number" yaml:"number"`
	WarehouseID null.String `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	IsDefault   null.Bool   `boil:"is_default" json:"is_default,omitempty" toml:"is_default" yaml:"is_default,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *warehouseBankCardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseBankCardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseBankCardColumns = struct {
	ID          string
	Number      string
	WarehouseID string
	IsDefault   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "_id",
	Number:      "number",
	WarehouseID: "warehouse_id",
	IsDefault:   "is_default",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var WarehouseBankCardTableColumns = struct {
	ID          string
	Number      string
	WarehouseID string
	IsDefault   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "warehouse_bank_cards._id",
	Number:      "warehouse_bank_cards.number",
	WarehouseID: "warehouse_bank_cards.warehouse_id",
	IsDefault:   "warehouse_bank_cards.is_default",
	CreatedAt:   "warehouse_bank_cards.created_at",
	UpdatedAt:   "warehouse_bank_cards.updated_at",
}

// Generated where

var WarehouseBankCardWhere = struct {
	ID          whereHelpernull_String
	Number      whereHelpernull_String
	WarehouseID whereHelpernull_String
	IsDefault   whereHelpernull_Bool
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelpernull_String{field: "\"warehouse_bank_cards\".\"_id\""},
	Number:      whereHelpernull_String{field: "\"warehouse_bank_cards\".\"number\""},
	WarehouseID: whereHelpernull_String{field: "\"warehouse_bank_cards\".\"warehouse_id\""},
	IsDefault:   whereHelpernull_Bool{field: "\"warehouse_bank_cards\".\"is_default\""},
	CreatedAt:   whereHelpernull_Time{field: "\"warehouse_bank_cards\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"warehouse_bank_cards\".\"updated_at\""},
}

// WarehouseBankCardRels is where relationship names are stored.
var WarehouseBankCardRels = struct {
	Warehouse string
}{
	Warehouse: "Warehouse",
}

// warehouseBankCardR is where relationships are stored.
type warehouseBankCardR struct {
	Warehouse *Warehouse `boil:"Warehouse" json:"Warehouse" toml:"Warehouse" yaml:"Warehouse"`
}

// NewStruct creates a new relationship struct
func (*warehouseBankCardR) NewStruct() *warehouseBankCardR {
	return &warehouseBankCardR{}
}

func (r *warehouseBankCardR) GetWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.Warehouse
}

// warehouseBankCardL is where Load methods for each relationship are stored.
type warehouseBankCardL struct{}

var (
	warehouseBankCardAllColumns            = []string{"_id", "number", "warehouse_id", "is_default", "created_at", "updated_at"}
	warehouseBankCardColumnsWithoutDefault = []string{"_id", "number", "warehouse_id", "created_at", "updated_at"}
	warehouseBankCardColumnsWithDefault    = []string{"is_default"}
	warehouseBankCardPrimaryKeyColumns     = []string{"_id"}
	warehouseBankCardGeneratedColumns      = []string{}
)

type (
	// WarehouseBankCardSlice is an alias for a slice of pointers to WarehouseBankCard.
	// This should almost always be used instead of []WarehouseBankCard.
	WarehouseBankCardSlice []*WarehouseBankCard
	// WarehouseBankCardHook is the signature for custom WarehouseBankCard hook methods
	WarehouseBankCardHook func(context.Context, boil.ContextExecutor, *WarehouseBankCard) error

	warehouseBankCardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseBankCardType                 = reflect.TypeOf(&WarehouseBankCard{})
	warehouseBankCardMapping              = queries.MakeStructMapping(warehouseBankCardType)
	warehouseBankCardPrimaryKeyMapping, _ = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, warehouseBankCardPrimaryKeyColumns)
	warehouseBankCardInsertCacheMut       sync.RWMutex
	warehouseBankCardInsertCache          = make(map[string]insertCache)
	warehouseBankCardUpdateCacheMut       sync.RWMutex
	warehouseBankCardUpdateCache          = make(map[string]updateCache)
	warehouseBankCardUpsertCacheMut       sync.RWMutex
	warehouseBankCardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var warehouseBankCardAfterSelectMu sync.Mutex
var warehouseBankCardAfterSelectHooks []WarehouseBankCardHook

var warehouseBankCardBeforeInsertMu sync.Mutex
var warehouseBankCardBeforeInsertHooks []WarehouseBankCardHook
var warehouseBankCardAfterInsertMu sync.Mutex
var warehouseBankCardAfterInsertHooks []WarehouseBankCardHook

var warehouseBankCardBeforeUpdateMu sync.Mutex
var warehouseBankCardBeforeUpdateHooks []WarehouseBankCardHook
var warehouseBankCardAfterUpdateMu sync.Mutex
var warehouseBankCardAfterUpdateHooks []WarehouseBankCardHook

var warehouseBankCardBeforeDeleteMu sync.Mutex
var warehouseBankCardBeforeDeleteHooks []WarehouseBankCardHook
var warehouseBankCardAfterDeleteMu sync.Mutex
var warehouseBankCardAfterDeleteHooks []WarehouseBankCardHook

var warehouseBankCardBeforeUpsertMu sync.Mutex
var warehouseBankCardBeforeUpsertHooks []WarehouseBankCardHook
var warehouseBankCardAfterUpsertMu sync.Mutex
var warehouseBankCardAfterUpsertHooks []WarehouseBankCardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WarehouseBankCard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WarehouseBankCard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WarehouseBankCard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WarehouseBankCard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WarehouseBankCard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WarehouseBankCard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WarehouseBankCard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WarehouseBankCard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WarehouseBankCard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBankCardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWarehouseBankCardHook registers your hook function for all future operations.
func AddWarehouseBankCardHook(hookPoint boil.HookPoint, warehouseBankCardHook WarehouseBankCardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		warehouseBankCardAfterSelectMu.Lock()
		warehouseBankCardAfterSelectHooks = append(warehouseBankCardAfterSelectHooks, warehouseBankCardHook)
		warehouseBankCardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		warehouseBankCardBeforeInsertMu.Lock()
		warehouseBankCardBeforeInsertHooks = append(warehouseBankCardBeforeInsertHooks, warehouseBankCardHook)
		warehouseBankCardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		warehouseBankCardAfterInsertMu.Lock()
		warehouseBankCardAfterInsertHooks = append(warehouseBankCardAfterInsertHooks, warehouseBankCardHook)
		warehouseBankCardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		warehouseBankCardBeforeUpdateMu.Lock()
		warehouseBankCardBeforeUpdateHooks = append(warehouseBankCardBeforeUpdateHooks, warehouseBankCardHook)
		warehouseBankCardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		warehouseBankCardAfterUpdateMu.Lock()
		warehouseBankCardAfterUpdateHooks = append(warehouseBankCardAfterUpdateHooks, warehouseBankCardHook)
		warehouseBankCardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		warehouseBankCardBeforeDeleteMu.Lock()
		warehouseBankCardBeforeDeleteHooks = append(warehouseBankCardBeforeDeleteHooks, warehouseBankCardHook)
		warehouseBankCardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		warehouseBankCardAfterDeleteMu.Lock()
		warehouseBankCardAfterDeleteHooks = append(warehouseBankCardAfterDeleteHooks, warehouseBankCardHook)
		warehouseBankCardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		warehouseBankCardBeforeUpsertMu.Lock()
		warehouseBankCardBeforeUpsertHooks = append(warehouseBankCardBeforeUpsertHooks, warehouseBankCardHook)
		warehouseBankCardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		warehouseBankCardAfterUpsertMu.Lock()
		warehouseBankCardAfterUpsertHooks = append(warehouseBankCardAfterUpsertHooks, warehouseBankCardHook)
		warehouseBankCardAfterUpsertMu.Unlock()
	}
}

// One returns a single warehouseBankCard record from the query.
func (q warehouseBankCardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WarehouseBankCard, error) {
	o := &WarehouseBankCard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for warehouse_bank_cards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WarehouseBankCard records from the query.
func (q warehouseBankCardQuery) All(ctx context.Context, exec boil.ContextExecutor) (WarehouseBankCardSlice, error) {
	var o []*WarehouseBankCard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to WarehouseBankCard slice")
	}

	if len(warehouseBankCardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WarehouseBankCard records in the query.
func (q warehouseBankCardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count warehouse_bank_cards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseBankCardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if warehouse_bank_cards exists")
	}

	return count > 0, nil
}

// Warehouse pointed to by the foreign key.
func (o *WarehouseBankCard) Warehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.WarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// LoadWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseBankCardL) LoadWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouseBankCard interface{}, mods queries.Applicator) error {
	var slice []*WarehouseBankCard
	var object *WarehouseBankCard

	if singular {
		var ok bool
		object, ok = maybeWarehouseBankCard.(*WarehouseBankCard)
		if !ok {
			object = new(WarehouseBankCard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouseBankCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouseBankCard))
			}
		}
	} else {
		s, ok := maybeWarehouseBankCard.(*[]*WarehouseBankCard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouseBankCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouseBankCard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseBankCardR{}
		}
		if !queries.IsNil(object.WarehouseID) {
			args[object.WarehouseID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseBankCardR{}
			}

			if !queries.IsNil(obj.WarehouseID) {
				args[obj.WarehouseID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Warehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.WarehouseBankCards = append(foreign.R.WarehouseBankCards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WarehouseID, foreign.ID) {
				local.R.Warehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.WarehouseBankCards = append(foreign.R.WarehouseBankCards, local)
				break
			}
		}
	}

	return nil
}

// SetWarehouse of the warehouseBankCard to the related item.
// Sets o.R.Warehouse to related.
// Adds o to related.R.WarehouseBankCards.
func (o *WarehouseBankCard) SetWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouse_bank_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
		strmangle.WhereClause("\"", "\"", 2, warehouseBankCardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WarehouseID, related.ID)
	if o.R == nil {
		o.R = &warehouseBankCardR{
			Warehouse: related,
		}
	} else {
		o.R.Warehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			WarehouseBankCards: WarehouseBankCardSlice{o},
		}
	} else {
		related.R.WarehouseBankCards = append(related.R.WarehouseBankCards, o)
	}

	return nil
}

// WarehouseBankCards retrieves all the records using an executor.
func WarehouseBankCards(mods ...qm.QueryMod) warehouseBankCardQuery {
	mods = append(mods, qm.From("\"warehouse_bank_cards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouse_bank_cards\".*"})
	}

	return warehouseBankCardQuery{q}
}

// FindWarehouseBankCard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouseBankCard(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*WarehouseBankCard, error) {
	warehouseBankCardObj := &WarehouseBankCard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouse_bank_cards\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, warehouseBankCardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from warehouse_bank_cards")
	}

	if err = warehouseBankCardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return warehouseBankCardObj, err
	}

	return warehouseBankCardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WarehouseBankCard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no warehouse_bank_cards provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseBankCardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseBankCardInsertCacheMut.RLock()
	cache, cached := warehouseBankCardInsertCache[key]
	warehouseBankCardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseBankCardAllColumns,
			warehouseBankCardColumnsWithDefault,
			warehouseBankCardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouse_bank_cards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouse_bank_cards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into warehouse_bank_cards")
	}

	if !cached {
		warehouseBankCardInsertCacheMut.Lock()
		warehouseBankCardInsertCache[key] = cache
		warehouseBankCardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WarehouseBankCard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WarehouseBankCard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	warehouseBankCardUpdateCacheMut.RLock()
	cache, cached := warehouseBankCardUpdateCache[key]
	warehouseBankCardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseBankCardAllColumns,
			warehouseBankCardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update warehouse_bank_cards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouse_bank_cards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehouseBankCardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, append(wl, warehouseBankCardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update warehouse_bank_cards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for warehouse_bank_cards")
	}

	if !cached {
		warehouseBankCardUpdateCacheMut.Lock()
		warehouseBankCardUpdateCache[key] = cache
		warehouseBankCardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseBankCardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for warehouse_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for warehouse_bank_cards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseBankCardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouse_bank_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehouseBankCardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in warehouseBankCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all warehouseBankCard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WarehouseBankCard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no warehouse_bank_cards provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseBankCardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseBankCardUpsertCacheMut.RLock()
	cache, cached := warehouseBankCardUpsertCache[key]
	warehouseBankCardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			warehouseBankCardAllColumns,
			warehouseBankCardColumnsWithDefault,
			warehouseBankCardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseBankCardAllColumns,
			warehouseBankCardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert warehouse_bank_cards, could not build update column list")
		}

		ret := strmangle.SetComplement(warehouseBankCardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(warehouseBankCardPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert warehouse_bank_cards, could not build conflict column list")
			}

			conflict = make([]string, len(warehouseBankCardPrimaryKeyColumns))
			copy(conflict, warehouseBankCardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouse_bank_cards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseBankCardType, warehouseBankCardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert warehouse_bank_cards")
	}

	if !cached {
		warehouseBankCardUpsertCacheMut.Lock()
		warehouseBankCardUpsertCache[key] = cache
		warehouseBankCardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WarehouseBankCard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WarehouseBankCard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no WarehouseBankCard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehouseBankCardPrimaryKeyMapping)
	sql := "DELETE FROM \"warehouse_bank_cards\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from warehouse_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for warehouse_bank_cards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseBankCardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no warehouseBankCardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from warehouse_bank_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for warehouse_bank_cards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseBankCardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(warehouseBankCardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouse_bank_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehouseBankCardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from warehouseBankCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for warehouse_bank_cards")
	}

	if len(warehouseBankCardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WarehouseBankCard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWarehouseBankCard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseBankCardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseBankCardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseBankCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouse_bank_cards\".* FROM \"warehouse_bank_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehouseBankCardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in WarehouseBankCardSlice")
	}

	*o = slice

	return nil
}

// WarehouseBankCardExists checks if the WarehouseBankCard row exists.
func WarehouseBankCardExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouse_bank_cards\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if warehouse_bank_cards exists")
	}

	return exists, nil
}

// Exists checks if the WarehouseBankCard row exists.
func (o *WarehouseBankCard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WarehouseBankCardExists(ctx, exec, o.ID)
}
