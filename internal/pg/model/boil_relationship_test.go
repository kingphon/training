// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CartItemToCartUsingCart", testCartItemToOneCartUsingCart)
	t.Run("CartItemToProductUsingProduct", testCartItemToOneProductUsingProduct)
	t.Run("CartItemToShopUsingShop", testCartItemToOneShopUsingShop)
	t.Run("CartItemToStockKeepingUnitUsingSku", testCartItemToOneStockKeepingUnitUsingSku)
	t.Run("CartToUserUsingUser", testCartToOneUserUsingUser)
	t.Run("DeliveryToLocationUsingLocation", testDeliveryToOneLocationUsingLocation)
	t.Run("DeliveryToUserUsingUser", testDeliveryToOneUserUsingUser)
	t.Run("DeliveryToWarehouseUsingWarehouse", testDeliveryToOneWarehouseUsingWarehouse)
	t.Run("LocationToUserUsingUser", testLocationToOneUserUsingUser)
	t.Run("OrderItemToOrderUsingOrder", testOrderItemToOneOrderUsingOrder)
	t.Run("OrderItemToProductUsingProduct", testOrderItemToOneProductUsingProduct)
	t.Run("OrderItemToStockKeepingUnitUsingSku", testOrderItemToOneStockKeepingUnitUsingSku)
	t.Run("OrderToDeliveryUsingDelivery", testOrderToOneDeliveryUsingDelivery)
	t.Run("OrderToWarehouseUsingDestinationWarehouse", testOrderToOneWarehouseUsingDestinationWarehouse)
	t.Run("OrderToPaymentUsingPayment", testOrderToOnePaymentUsingPayment)
	t.Run("OrderToShopUsingShop", testOrderToOneShopUsingShop)
	t.Run("OrderToUserUsingUser", testOrderToOneUserUsingUser)
	t.Run("OrderToWarehouseUsingWarehouse", testOrderToOneWarehouseUsingWarehouse)
	t.Run("PaymentToUserUsingUser", testPaymentToOneUserUsingUser)
	t.Run("ProductToShopUsingShop", testProductToOneShopUsingShop)
	t.Run("ProductToWarehouseUsingWarehouse", testProductToOneWarehouseUsingWarehouse)
	t.Run("ShopBankCardToShopUsingShop", testShopBankCardToOneShopUsingShop)
	t.Run("ShopToUserUsingUser", testShopToOneUserUsingUser)
	t.Run("StockKeepingUnitToProductUsingProduct", testStockKeepingUnitToOneProductUsingProduct)
	t.Run("UserBankCardToUserUsingUser", testUserBankCardToOneUserUsingUser)
	t.Run("WarehouseBankCardToWarehouseUsingWarehouse", testWarehouseBankCardToOneWarehouseUsingWarehouse)
	t.Run("WarehouseToUserUsingUser", testWarehouseToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CartToCartItems", testCartToManyCartItems)
	t.Run("DeliveryToOrders", testDeliveryToManyOrders)
	t.Run("LocationToDeliveries", testLocationToManyDeliveries)
	t.Run("OrderToOrderItems", testOrderToManyOrderItems)
	t.Run("PaymentToOrders", testPaymentToManyOrders)
	t.Run("ProductToCartItems", testProductToManyCartItems)
	t.Run("ProductToOrderItems", testProductToManyOrderItems)
	t.Run("ProductToStockKeepingUnits", testProductToManyStockKeepingUnits)
	t.Run("ShopToCartItems", testShopToManyCartItems)
	t.Run("ShopToOrders", testShopToManyOrders)
	t.Run("ShopToProducts", testShopToManyProducts)
	t.Run("ShopToShopBankCards", testShopToManyShopBankCards)
	t.Run("StockKeepingUnitToSkuCartItems", testStockKeepingUnitToManySkuCartItems)
	t.Run("StockKeepingUnitToSkuOrderItems", testStockKeepingUnitToManySkuOrderItems)
	t.Run("UserToCarts", testUserToManyCarts)
	t.Run("UserToDeliveries", testUserToManyDeliveries)
	t.Run("UserToLocations", testUserToManyLocations)
	t.Run("UserToOrders", testUserToManyOrders)
	t.Run("UserToPayments", testUserToManyPayments)
	t.Run("UserToShops", testUserToManyShops)
	t.Run("UserToUserBankCards", testUserToManyUserBankCards)
	t.Run("UserToWarehouses", testUserToManyWarehouses)
	t.Run("WarehouseToDeliveries", testWarehouseToManyDeliveries)
	t.Run("WarehouseToDestinationWarehouseOrders", testWarehouseToManyDestinationWarehouseOrders)
	t.Run("WarehouseToOrders", testWarehouseToManyOrders)
	t.Run("WarehouseToProducts", testWarehouseToManyProducts)
	t.Run("WarehouseToWarehouseBankCards", testWarehouseToManyWarehouseBankCards)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CartItemToCartUsingCartItems", testCartItemToOneSetOpCartUsingCart)
	t.Run("CartItemToProductUsingCartItems", testCartItemToOneSetOpProductUsingProduct)
	t.Run("CartItemToShopUsingCartItems", testCartItemToOneSetOpShopUsingShop)
	t.Run("CartItemToStockKeepingUnitUsingSkuCartItems", testCartItemToOneSetOpStockKeepingUnitUsingSku)
	t.Run("CartToUserUsingCarts", testCartToOneSetOpUserUsingUser)
	t.Run("DeliveryToLocationUsingDeliveries", testDeliveryToOneSetOpLocationUsingLocation)
	t.Run("DeliveryToUserUsingDeliveries", testDeliveryToOneSetOpUserUsingUser)
	t.Run("DeliveryToWarehouseUsingDeliveries", testDeliveryToOneSetOpWarehouseUsingWarehouse)
	t.Run("LocationToUserUsingLocations", testLocationToOneSetOpUserUsingUser)
	t.Run("OrderItemToOrderUsingOrderItems", testOrderItemToOneSetOpOrderUsingOrder)
	t.Run("OrderItemToProductUsingOrderItems", testOrderItemToOneSetOpProductUsingProduct)
	t.Run("OrderItemToStockKeepingUnitUsingSkuOrderItems", testOrderItemToOneSetOpStockKeepingUnitUsingSku)
	t.Run("OrderToDeliveryUsingOrders", testOrderToOneSetOpDeliveryUsingDelivery)
	t.Run("OrderToWarehouseUsingDestinationWarehouseOrders", testOrderToOneSetOpWarehouseUsingDestinationWarehouse)
	t.Run("OrderToPaymentUsingOrders", testOrderToOneSetOpPaymentUsingPayment)
	t.Run("OrderToShopUsingOrders", testOrderToOneSetOpShopUsingShop)
	t.Run("OrderToUserUsingOrders", testOrderToOneSetOpUserUsingUser)
	t.Run("OrderToWarehouseUsingOrders", testOrderToOneSetOpWarehouseUsingWarehouse)
	t.Run("PaymentToUserUsingPayments", testPaymentToOneSetOpUserUsingUser)
	t.Run("ProductToShopUsingProducts", testProductToOneSetOpShopUsingShop)
	t.Run("ProductToWarehouseUsingProducts", testProductToOneSetOpWarehouseUsingWarehouse)
	t.Run("ShopBankCardToShopUsingShopBankCards", testShopBankCardToOneSetOpShopUsingShop)
	t.Run("ShopToUserUsingShops", testShopToOneSetOpUserUsingUser)
	t.Run("StockKeepingUnitToProductUsingStockKeepingUnits", testStockKeepingUnitToOneSetOpProductUsingProduct)
	t.Run("UserBankCardToUserUsingUserBankCards", testUserBankCardToOneSetOpUserUsingUser)
	t.Run("WarehouseBankCardToWarehouseUsingWarehouseBankCards", testWarehouseBankCardToOneSetOpWarehouseUsingWarehouse)
	t.Run("WarehouseToUserUsingWarehouses", testWarehouseToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CartToCartItems", testCartToManyAddOpCartItems)
	t.Run("DeliveryToOrders", testDeliveryToManyAddOpOrders)
	t.Run("LocationToDeliveries", testLocationToManyAddOpDeliveries)
	t.Run("OrderToOrderItems", testOrderToManyAddOpOrderItems)
	t.Run("PaymentToOrders", testPaymentToManyAddOpOrders)
	t.Run("ProductToCartItems", testProductToManyAddOpCartItems)
	t.Run("ProductToOrderItems", testProductToManyAddOpOrderItems)
	t.Run("ProductToStockKeepingUnits", testProductToManyAddOpStockKeepingUnits)
	t.Run("ShopToCartItems", testShopToManyAddOpCartItems)
	t.Run("ShopToOrders", testShopToManyAddOpOrders)
	t.Run("ShopToProducts", testShopToManyAddOpProducts)
	t.Run("ShopToShopBankCards", testShopToManyAddOpShopBankCards)
	t.Run("StockKeepingUnitToSkuCartItems", testStockKeepingUnitToManyAddOpSkuCartItems)
	t.Run("StockKeepingUnitToSkuOrderItems", testStockKeepingUnitToManyAddOpSkuOrderItems)
	t.Run("UserToCarts", testUserToManyAddOpCarts)
	t.Run("UserToDeliveries", testUserToManyAddOpDeliveries)
	t.Run("UserToLocations", testUserToManyAddOpLocations)
	t.Run("UserToOrders", testUserToManyAddOpOrders)
	t.Run("UserToPayments", testUserToManyAddOpPayments)
	t.Run("UserToShops", testUserToManyAddOpShops)
	t.Run("UserToUserBankCards", testUserToManyAddOpUserBankCards)
	t.Run("UserToWarehouses", testUserToManyAddOpWarehouses)
	t.Run("WarehouseToDeliveries", testWarehouseToManyAddOpDeliveries)
	t.Run("WarehouseToDestinationWarehouseOrders", testWarehouseToManyAddOpDestinationWarehouseOrders)
	t.Run("WarehouseToOrders", testWarehouseToManyAddOpOrders)
	t.Run("WarehouseToProducts", testWarehouseToManyAddOpProducts)
	t.Run("WarehouseToWarehouseBankCards", testWarehouseToManyAddOpWarehouseBankCards)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}
