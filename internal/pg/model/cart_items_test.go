// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCartItems(t *testing.T) {
	t.Parallel()

	query := CartItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCartItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CartItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CartItemExists(ctx, tx, o.ShopID, o.CartID, o.ProductID, o.SkuID)
	if err != nil {
		t.Errorf("Unable to check if CartItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CartItemExists to return true, but got false.")
	}
}

func testCartItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cartItemFound, err := FindCartItem(ctx, tx, o.ShopID, o.CartID, o.ProductID, o.SkuID)
	if err != nil {
		t.Error(err)
	}

	if cartItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCartItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CartItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCartItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CartItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCartItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cartItemOne := &CartItem{}
	cartItemTwo := &CartItem{}
	if err = randomize.Struct(seed, cartItemOne, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err = randomize.Struct(seed, cartItemTwo, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CartItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCartItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cartItemOne := &CartItem{}
	cartItemTwo := &CartItem{}
	if err = randomize.Struct(seed, cartItemOne, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err = randomize.Struct(seed, cartItemTwo, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cartItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func cartItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CartItem) error {
	*o = CartItem{}
	return nil
}

func testCartItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CartItem{}
	o := &CartItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cartItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CartItem object: %s", err)
	}

	AddCartItemHook(boil.BeforeInsertHook, cartItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cartItemBeforeInsertHooks = []CartItemHook{}

	AddCartItemHook(boil.AfterInsertHook, cartItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cartItemAfterInsertHooks = []CartItemHook{}

	AddCartItemHook(boil.AfterSelectHook, cartItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cartItemAfterSelectHooks = []CartItemHook{}

	AddCartItemHook(boil.BeforeUpdateHook, cartItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cartItemBeforeUpdateHooks = []CartItemHook{}

	AddCartItemHook(boil.AfterUpdateHook, cartItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cartItemAfterUpdateHooks = []CartItemHook{}

	AddCartItemHook(boil.BeforeDeleteHook, cartItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cartItemBeforeDeleteHooks = []CartItemHook{}

	AddCartItemHook(boil.AfterDeleteHook, cartItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cartItemAfterDeleteHooks = []CartItemHook{}

	AddCartItemHook(boil.BeforeUpsertHook, cartItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cartItemBeforeUpsertHooks = []CartItemHook{}

	AddCartItemHook(boil.AfterUpsertHook, cartItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cartItemAfterUpsertHooks = []CartItemHook{}
}

func testCartItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cartItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartItemToOneCartUsingCart(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartItem
	var foreign Cart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CartID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cart().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCartHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CartItemSlice{&local}
	if err = local.L.LoadCart(ctx, tx, false, (*[]*CartItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cart == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cart = nil
	if err = local.L.LoadCart(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cart == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCartItemToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartItem
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CartItemSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*CartItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCartItemToOneShopUsingShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartItem
	var foreign Shop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShopID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShopHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CartItemSlice{&local}
	if err = local.L.LoadShop(ctx, tx, false, (*[]*CartItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shop = nil
	if err = local.L.LoadShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCartItemToOneStockKeepingUnitUsingSku(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartItem
	var foreign StockKeepingUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SkuID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sku().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStockKeepingUnitHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CartItemSlice{&local}
	if err = local.L.LoadSku(ctx, tx, false, (*[]*CartItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sku == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sku = nil
	if err = local.L.LoadSku(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sku == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCartItemToOneSetOpCartUsingCart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartItem
	var b, c Cart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartItemDBTypes, false, strmangle.SetComplement(cartItemPrimaryKeyColumns, cartItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Cart{&b, &c} {
		err = a.SetCart(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cart != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CartID, x.ID) {
			t.Error("foreign key was wrong value", a.CartID)
		}

		if exists, err := CartItemExists(ctx, tx, a.ShopID, a.CartID, a.ProductID, a.SkuID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCartItemToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartItem
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartItemDBTypes, false, strmangle.SetComplement(cartItemPrimaryKeyColumns, cartItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		if exists, err := CartItemExists(ctx, tx, a.ShopID, a.CartID, a.ProductID, a.SkuID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCartItemToOneSetOpShopUsingShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartItem
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartItemDBTypes, false, strmangle.SetComplement(cartItemPrimaryKeyColumns, cartItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shop{&b, &c} {
		err = a.SetShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShopID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopID)
		}

		if exists, err := CartItemExists(ctx, tx, a.ShopID, a.CartID, a.ProductID, a.SkuID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCartItemToOneSetOpStockKeepingUnitUsingSku(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartItem
	var b, c StockKeepingUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartItemDBTypes, false, strmangle.SetComplement(cartItemPrimaryKeyColumns, cartItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stockKeepingUnitDBTypes, false, strmangle.SetComplement(stockKeepingUnitPrimaryKeyColumns, stockKeepingUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockKeepingUnitDBTypes, false, strmangle.SetComplement(stockKeepingUnitPrimaryKeyColumns, stockKeepingUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StockKeepingUnit{&b, &c} {
		err = a.SetSku(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sku != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SkuCartItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SkuID, x.ID) {
			t.Error("foreign key was wrong value", a.SkuID)
		}

		if exists, err := CartItemExists(ctx, tx, a.ShopID, a.CartID, a.ProductID, a.SkuID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testCartItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CartItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cartItemDBTypes = map[string]string{`ShopID`: `text`, `CartID`: `text`, `ProductID`: `text`, `SkuID`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testCartItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cartItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cartItemAllColumns) == len(cartItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCartItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cartItemAllColumns) == len(cartItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CartItem{}
	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartItemDBTypes, true, cartItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cartItemAllColumns, cartItemPrimaryKeyColumns) {
		fields = cartItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			cartItemAllColumns,
			cartItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CartItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCartItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(cartItemAllColumns) == len(cartItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CartItem{}
	if err = randomize.Struct(seed, &o, cartItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CartItem: %s", err)
	}

	count, err := CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cartItemDBTypes, false, cartItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CartItem: %s", err)
	}

	count, err = CartItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
