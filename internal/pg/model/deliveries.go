// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Delivery is an object representing the database table.
type Delivery struct {
	ID            null.String     `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Code          null.String     `boil:"code" json:"code" toml:"code" yaml:"code"`
	Title         null.String     `boil:"title" json:"title" toml:"title" yaml:"title"`
	ShipFee       decimal.Decimal `boil:"ship_fee" json:"ship_fee" toml:"ship_fee" yaml:"ship_fee"`
	Status        null.String     `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserID        null.String     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EstimateDate  null.Time       `boil:"estimate_date" json:"estimate_date" toml:"estimate_date" yaml:"estimate_date"`
	UserInfo      null.JSON       `boil:"user_info" json:"user_info,omitempty" toml:"user_info" yaml:"user_info,omitempty"`
	WarehouseID   null.String     `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	WarehouseInfo null.JSON       `boil:"warehouse_info" json:"warehouse_info,omitempty" toml:"warehouse_info" yaml:"warehouse_info,omitempty"`
	LocationID    null.String     `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	LocationInfo  null.JSON       `boil:"location_info" json:"location_info,omitempty" toml:"location_info" yaml:"location_info,omitempty"`
	CreatedAt     null.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     null.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *deliveryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryColumns = struct {
	ID            string
	Code          string
	Title         string
	ShipFee       string
	Status        string
	UserID        string
	EstimateDate  string
	UserInfo      string
	WarehouseID   string
	WarehouseInfo string
	LocationID    string
	LocationInfo  string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "_id",
	Code:          "code",
	Title:         "title",
	ShipFee:       "ship_fee",
	Status:        "status",
	UserID:        "user_id",
	EstimateDate:  "estimate_date",
	UserInfo:      "user_info",
	WarehouseID:   "warehouse_id",
	WarehouseInfo: "warehouse_info",
	LocationID:    "location_id",
	LocationInfo:  "location_info",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var DeliveryTableColumns = struct {
	ID            string
	Code          string
	Title         string
	ShipFee       string
	Status        string
	UserID        string
	EstimateDate  string
	UserInfo      string
	WarehouseID   string
	WarehouseInfo string
	LocationID    string
	LocationInfo  string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "deliveries._id",
	Code:          "deliveries.code",
	Title:         "deliveries.title",
	ShipFee:       "deliveries.ship_fee",
	Status:        "deliveries.status",
	UserID:        "deliveries.user_id",
	EstimateDate:  "deliveries.estimate_date",
	UserInfo:      "deliveries.user_info",
	WarehouseID:   "deliveries.warehouse_id",
	WarehouseInfo: "deliveries.warehouse_info",
	LocationID:    "deliveries.location_id",
	LocationInfo:  "deliveries.location_info",
	CreatedAt:     "deliveries.created_at",
	UpdatedAt:     "deliveries.updated_at",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeliveryWhere = struct {
	ID            whereHelpernull_String
	Code          whereHelpernull_String
	Title         whereHelpernull_String
	ShipFee       whereHelperdecimal_Decimal
	Status        whereHelpernull_String
	UserID        whereHelpernull_String
	EstimateDate  whereHelpernull_Time
	UserInfo      whereHelpernull_JSON
	WarehouseID   whereHelpernull_String
	WarehouseInfo whereHelpernull_JSON
	LocationID    whereHelpernull_String
	LocationInfo  whereHelpernull_JSON
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelpernull_String{field: "\"deliveries\".\"_id\""},
	Code:          whereHelpernull_String{field: "\"deliveries\".\"code\""},
	Title:         whereHelpernull_String{field: "\"deliveries\".\"title\""},
	ShipFee:       whereHelperdecimal_Decimal{field: "\"deliveries\".\"ship_fee\""},
	Status:        whereHelpernull_String{field: "\"deliveries\".\"status\""},
	UserID:        whereHelpernull_String{field: "\"deliveries\".\"user_id\""},
	EstimateDate:  whereHelpernull_Time{field: "\"deliveries\".\"estimate_date\""},
	UserInfo:      whereHelpernull_JSON{field: "\"deliveries\".\"user_info\""},
	WarehouseID:   whereHelpernull_String{field: "\"deliveries\".\"warehouse_id\""},
	WarehouseInfo: whereHelpernull_JSON{field: "\"deliveries\".\"warehouse_info\""},
	LocationID:    whereHelpernull_String{field: "\"deliveries\".\"location_id\""},
	LocationInfo:  whereHelpernull_JSON{field: "\"deliveries\".\"location_info\""},
	CreatedAt:     whereHelpernull_Time{field: "\"deliveries\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"deliveries\".\"updated_at\""},
}

// DeliveryRels is where relationship names are stored.
var DeliveryRels = struct {
	Location  string
	User      string
	Warehouse string
	Orders    string
}{
	Location:  "Location",
	User:      "User",
	Warehouse: "Warehouse",
	Orders:    "Orders",
}

// deliveryR is where relationships are stored.
type deliveryR struct {
	Location  *Location  `boil:"Location" json:"Location" toml:"Location" yaml:"Location"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
	Warehouse *Warehouse `boil:"Warehouse" json:"Warehouse" toml:"Warehouse" yaml:"Warehouse"`
	Orders    OrderSlice `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*deliveryR) NewStruct() *deliveryR {
	return &deliveryR{}
}

func (r *deliveryR) GetLocation() *Location {
	if r == nil {
		return nil
	}
	return r.Location
}

func (r *deliveryR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *deliveryR) GetWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.Warehouse
}

func (r *deliveryR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

// deliveryL is where Load methods for each relationship are stored.
type deliveryL struct{}

var (
	deliveryAllColumns            = []string{"_id", "code", "title", "ship_fee", "status", "user_id", "estimate_date", "user_info", "warehouse_id", "warehouse_info", "location_id", "location_info", "created_at", "updated_at"}
	deliveryColumnsWithoutDefault = []string{"_id", "code", "title", "ship_fee", "status", "user_id", "estimate_date", "warehouse_id", "location_id", "created_at", "updated_at"}
	deliveryColumnsWithDefault    = []string{"user_info", "warehouse_info", "location_info"}
	deliveryPrimaryKeyColumns     = []string{"_id"}
	deliveryGeneratedColumns      = []string{}
)

type (
	// DeliverySlice is an alias for a slice of pointers to Delivery.
	// This should almost always be used instead of []Delivery.
	DeliverySlice []*Delivery
	// DeliveryHook is the signature for custom Delivery hook methods
	DeliveryHook func(context.Context, boil.ContextExecutor, *Delivery) error

	deliveryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryType                 = reflect.TypeOf(&Delivery{})
	deliveryMapping              = queries.MakeStructMapping(deliveryType)
	deliveryPrimaryKeyMapping, _ = queries.BindMapping(deliveryType, deliveryMapping, deliveryPrimaryKeyColumns)
	deliveryInsertCacheMut       sync.RWMutex
	deliveryInsertCache          = make(map[string]insertCache)
	deliveryUpdateCacheMut       sync.RWMutex
	deliveryUpdateCache          = make(map[string]updateCache)
	deliveryUpsertCacheMut       sync.RWMutex
	deliveryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryAfterSelectMu sync.Mutex
var deliveryAfterSelectHooks []DeliveryHook

var deliveryBeforeInsertMu sync.Mutex
var deliveryBeforeInsertHooks []DeliveryHook
var deliveryAfterInsertMu sync.Mutex
var deliveryAfterInsertHooks []DeliveryHook

var deliveryBeforeUpdateMu sync.Mutex
var deliveryBeforeUpdateHooks []DeliveryHook
var deliveryAfterUpdateMu sync.Mutex
var deliveryAfterUpdateHooks []DeliveryHook

var deliveryBeforeDeleteMu sync.Mutex
var deliveryBeforeDeleteHooks []DeliveryHook
var deliveryAfterDeleteMu sync.Mutex
var deliveryAfterDeleteHooks []DeliveryHook

var deliveryBeforeUpsertMu sync.Mutex
var deliveryBeforeUpsertHooks []DeliveryHook
var deliveryAfterUpsertMu sync.Mutex
var deliveryAfterUpsertHooks []DeliveryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Delivery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Delivery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Delivery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Delivery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Delivery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Delivery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Delivery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Delivery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Delivery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryHook registers your hook function for all future operations.
func AddDeliveryHook(hookPoint boil.HookPoint, deliveryHook DeliveryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryAfterSelectMu.Lock()
		deliveryAfterSelectHooks = append(deliveryAfterSelectHooks, deliveryHook)
		deliveryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryBeforeInsertMu.Lock()
		deliveryBeforeInsertHooks = append(deliveryBeforeInsertHooks, deliveryHook)
		deliveryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryAfterInsertMu.Lock()
		deliveryAfterInsertHooks = append(deliveryAfterInsertHooks, deliveryHook)
		deliveryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryBeforeUpdateMu.Lock()
		deliveryBeforeUpdateHooks = append(deliveryBeforeUpdateHooks, deliveryHook)
		deliveryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryAfterUpdateMu.Lock()
		deliveryAfterUpdateHooks = append(deliveryAfterUpdateHooks, deliveryHook)
		deliveryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryBeforeDeleteMu.Lock()
		deliveryBeforeDeleteHooks = append(deliveryBeforeDeleteHooks, deliveryHook)
		deliveryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryAfterDeleteMu.Lock()
		deliveryAfterDeleteHooks = append(deliveryAfterDeleteHooks, deliveryHook)
		deliveryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryBeforeUpsertMu.Lock()
		deliveryBeforeUpsertHooks = append(deliveryBeforeUpsertHooks, deliveryHook)
		deliveryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryAfterUpsertMu.Lock()
		deliveryAfterUpsertHooks = append(deliveryAfterUpsertHooks, deliveryHook)
		deliveryAfterUpsertMu.Unlock()
	}
}

// One returns a single delivery record from the query.
func (q deliveryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delivery, error) {
	o := &Delivery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for deliveries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Delivery records from the query.
func (q deliveryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliverySlice, error) {
	var o []*Delivery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to Delivery slice")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Delivery records in the query.
func (q deliveryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count deliveries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if deliveries exists")
	}

	return count > 0, nil
}

// Location pointed to by the foreign key.
func (o *Delivery) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	return Locations(queryMods...)
}

// User pointed to by the foreign key.
func (o *Delivery) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Warehouse pointed to by the foreign key.
func (o *Delivery) Warehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.WarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *Delivery) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"delivery_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.LocationID) {
			args[object.LocationID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.LocationID) {
				args[obj.LocationID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`locations`),
		qm.WhereIn(`locations._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(locationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LocationID, foreign.ID) {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryL) LoadWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		if !queries.IsNil(object.WarehouseID) {
			args[object.WarehouseID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}

			if !queries.IsNil(obj.WarehouseID) {
				args[obj.WarehouseID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Warehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.Deliveries = append(foreign.R.Deliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WarehouseID, foreign.ID) {
				local.R.Warehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.Deliveries = append(foreign.R.Deliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deliveryL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelivery interface{}, mods queries.Applicator) error {
	var slice []*Delivery
	var object *Delivery

	if singular {
		var ok bool
		object, ok = maybeDelivery.(*Delivery)
		if !ok {
			object = new(Delivery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelivery))
			}
		}
	} else {
		s, ok := maybeDelivery.(*[]*Delivery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelivery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelivery))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.delivery_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeliveryID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// SetLocation of the delivery to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LocationID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// SetUser of the delivery to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// SetWarehouse of the delivery to the related item.
// Sets o.R.Warehouse to related.
// Adds o to related.R.Deliveries.
func (o *Delivery) SetWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WarehouseID, related.ID)
	if o.R == nil {
		o.R = &deliveryR{
			Warehouse: related,
		}
	} else {
		o.R.Warehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			Deliveries: DeliverySlice{o},
		}
	} else {
		related.R.Deliveries = append(related.R.Deliveries, o)
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the delivery, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Delivery appropriately.
func (o *Delivery) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliveryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliveryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &deliveryR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// Deliveries retrieves all the records using an executor.
func Deliveries(mods ...qm.QueryMod) deliveryQuery {
	mods = append(mods, qm.From("\"deliveries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"deliveries\".*"})
	}

	return deliveryQuery{q}
}

// FindDelivery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelivery(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*Delivery, error) {
	deliveryObj := &Delivery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"deliveries\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from deliveries")
	}

	if err = deliveryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryObj, err
	}

	return deliveryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delivery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no deliveries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryInsertCacheMut.RLock()
	cache, cached := deliveryInsertCache[key]
	deliveryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"deliveries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"deliveries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into deliveries")
	}

	if !cached {
		deliveryInsertCacheMut.Lock()
		deliveryInsertCache[key] = cache
		deliveryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Delivery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delivery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryUpdateCacheMut.RLock()
	cache, cached := deliveryUpdateCache[key]
	deliveryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update deliveries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"deliveries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, append(wl, deliveryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update deliveries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for deliveries")
	}

	if !cached {
		deliveryUpdateCacheMut.Lock()
		deliveryUpdateCache[key] = cache
		deliveryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for deliveries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliverySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"deliveries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all delivery")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delivery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no deliveries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryUpsertCacheMut.RLock()
	cache, cached := deliveryUpsertCache[key]
	deliveryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryAllColumns,
			deliveryColumnsWithDefault,
			deliveryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryAllColumns,
			deliveryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert deliveries, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert deliveries, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryPrimaryKeyColumns))
			copy(conflict, deliveryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"deliveries\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryType, deliveryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryType, deliveryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert deliveries")
	}

	if !cached {
		deliveryUpsertCacheMut.Lock()
		deliveryUpsertCache[key] = cache
		deliveryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Delivery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delivery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no Delivery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryPrimaryKeyMapping)
	sql := "DELETE FROM \"deliveries\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for deliveries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no deliveryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from deliveries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for deliveries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliverySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"deliveries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from delivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for deliveries")
	}

	if len(deliveryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delivery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelivery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliverySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliverySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"deliveries\".* FROM \"deliveries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in DeliverySlice")
	}

	*o = slice

	return nil
}

// DeliveryExists checks if the Delivery row exists.
func DeliveryExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"deliveries\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if deliveries exists")
	}

	return exists, nil
}

// Exists checks if the Delivery row exists.
func (o *Delivery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryExists(ctx, exec, o.ID)
}
