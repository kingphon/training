// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CartItems", testCartItems)
	t.Run("Carts", testCarts)
	t.Run("Deliveries", testDeliveries)
	t.Run("DeliverySessions", testDeliverySessions)
	t.Run("Locations", testLocations)
	t.Run("OrderItems", testOrderItems)
	t.Run("OrderSessions", testOrderSessions)
	t.Run("Orders", testOrders)
	t.Run("Payments", testPayments)
	t.Run("Products", testProducts)
	t.Run("ShopBankCards", testShopBankCards)
	t.Run("Shops", testShops)
	t.Run("StockKeepingUnits", testStockKeepingUnits)
	t.Run("UserBankCards", testUserBankCards)
	t.Run("Users", testUsers)
	t.Run("WarehouseBankCards", testWarehouseBankCards)
	t.Run("Warehouses", testWarehouses)
}

func TestDelete(t *testing.T) {
	t.Run("CartItems", testCartItemsDelete)
	t.Run("Carts", testCartsDelete)
	t.Run("Deliveries", testDeliveriesDelete)
	t.Run("DeliverySessions", testDeliverySessionsDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("OrderItems", testOrderItemsDelete)
	t.Run("OrderSessions", testOrderSessionsDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("Payments", testPaymentsDelete)
	t.Run("Products", testProductsDelete)
	t.Run("ShopBankCards", testShopBankCardsDelete)
	t.Run("Shops", testShopsDelete)
	t.Run("StockKeepingUnits", testStockKeepingUnitsDelete)
	t.Run("UserBankCards", testUserBankCardsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("WarehouseBankCards", testWarehouseBankCardsDelete)
	t.Run("Warehouses", testWarehousesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CartItems", testCartItemsQueryDeleteAll)
	t.Run("Carts", testCartsQueryDeleteAll)
	t.Run("Deliveries", testDeliveriesQueryDeleteAll)
	t.Run("DeliverySessions", testDeliverySessionsQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("OrderItems", testOrderItemsQueryDeleteAll)
	t.Run("OrderSessions", testOrderSessionsQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("Payments", testPaymentsQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("ShopBankCards", testShopBankCardsQueryDeleteAll)
	t.Run("Shops", testShopsQueryDeleteAll)
	t.Run("StockKeepingUnits", testStockKeepingUnitsQueryDeleteAll)
	t.Run("UserBankCards", testUserBankCardsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("WarehouseBankCards", testWarehouseBankCardsQueryDeleteAll)
	t.Run("Warehouses", testWarehousesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CartItems", testCartItemsSliceDeleteAll)
	t.Run("Carts", testCartsSliceDeleteAll)
	t.Run("Deliveries", testDeliveriesSliceDeleteAll)
	t.Run("DeliverySessions", testDeliverySessionsSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("OrderItems", testOrderItemsSliceDeleteAll)
	t.Run("OrderSessions", testOrderSessionsSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("Payments", testPaymentsSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("ShopBankCards", testShopBankCardsSliceDeleteAll)
	t.Run("Shops", testShopsSliceDeleteAll)
	t.Run("StockKeepingUnits", testStockKeepingUnitsSliceDeleteAll)
	t.Run("UserBankCards", testUserBankCardsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("WarehouseBankCards", testWarehouseBankCardsSliceDeleteAll)
	t.Run("Warehouses", testWarehousesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CartItems", testCartItemsExists)
	t.Run("Carts", testCartsExists)
	t.Run("Deliveries", testDeliveriesExists)
	t.Run("DeliverySessions", testDeliverySessionsExists)
	t.Run("Locations", testLocationsExists)
	t.Run("OrderItems", testOrderItemsExists)
	t.Run("OrderSessions", testOrderSessionsExists)
	t.Run("Orders", testOrdersExists)
	t.Run("Payments", testPaymentsExists)
	t.Run("Products", testProductsExists)
	t.Run("ShopBankCards", testShopBankCardsExists)
	t.Run("Shops", testShopsExists)
	t.Run("StockKeepingUnits", testStockKeepingUnitsExists)
	t.Run("UserBankCards", testUserBankCardsExists)
	t.Run("Users", testUsersExists)
	t.Run("WarehouseBankCards", testWarehouseBankCardsExists)
	t.Run("Warehouses", testWarehousesExists)
}

func TestFind(t *testing.T) {
	t.Run("CartItems", testCartItemsFind)
	t.Run("Carts", testCartsFind)
	t.Run("Deliveries", testDeliveriesFind)
	t.Run("DeliverySessions", testDeliverySessionsFind)
	t.Run("Locations", testLocationsFind)
	t.Run("OrderItems", testOrderItemsFind)
	t.Run("OrderSessions", testOrderSessionsFind)
	t.Run("Orders", testOrdersFind)
	t.Run("Payments", testPaymentsFind)
	t.Run("Products", testProductsFind)
	t.Run("ShopBankCards", testShopBankCardsFind)
	t.Run("Shops", testShopsFind)
	t.Run("StockKeepingUnits", testStockKeepingUnitsFind)
	t.Run("UserBankCards", testUserBankCardsFind)
	t.Run("Users", testUsersFind)
	t.Run("WarehouseBankCards", testWarehouseBankCardsFind)
	t.Run("Warehouses", testWarehousesFind)
}

func TestBind(t *testing.T) {
	t.Run("CartItems", testCartItemsBind)
	t.Run("Carts", testCartsBind)
	t.Run("Deliveries", testDeliveriesBind)
	t.Run("DeliverySessions", testDeliverySessionsBind)
	t.Run("Locations", testLocationsBind)
	t.Run("OrderItems", testOrderItemsBind)
	t.Run("OrderSessions", testOrderSessionsBind)
	t.Run("Orders", testOrdersBind)
	t.Run("Payments", testPaymentsBind)
	t.Run("Products", testProductsBind)
	t.Run("ShopBankCards", testShopBankCardsBind)
	t.Run("Shops", testShopsBind)
	t.Run("StockKeepingUnits", testStockKeepingUnitsBind)
	t.Run("UserBankCards", testUserBankCardsBind)
	t.Run("Users", testUsersBind)
	t.Run("WarehouseBankCards", testWarehouseBankCardsBind)
	t.Run("Warehouses", testWarehousesBind)
}

func TestOne(t *testing.T) {
	t.Run("CartItems", testCartItemsOne)
	t.Run("Carts", testCartsOne)
	t.Run("Deliveries", testDeliveriesOne)
	t.Run("DeliverySessions", testDeliverySessionsOne)
	t.Run("Locations", testLocationsOne)
	t.Run("OrderItems", testOrderItemsOne)
	t.Run("OrderSessions", testOrderSessionsOne)
	t.Run("Orders", testOrdersOne)
	t.Run("Payments", testPaymentsOne)
	t.Run("Products", testProductsOne)
	t.Run("ShopBankCards", testShopBankCardsOne)
	t.Run("Shops", testShopsOne)
	t.Run("StockKeepingUnits", testStockKeepingUnitsOne)
	t.Run("UserBankCards", testUserBankCardsOne)
	t.Run("Users", testUsersOne)
	t.Run("WarehouseBankCards", testWarehouseBankCardsOne)
	t.Run("Warehouses", testWarehousesOne)
}

func TestAll(t *testing.T) {
	t.Run("CartItems", testCartItemsAll)
	t.Run("Carts", testCartsAll)
	t.Run("Deliveries", testDeliveriesAll)
	t.Run("DeliverySessions", testDeliverySessionsAll)
	t.Run("Locations", testLocationsAll)
	t.Run("OrderItems", testOrderItemsAll)
	t.Run("OrderSessions", testOrderSessionsAll)
	t.Run("Orders", testOrdersAll)
	t.Run("Payments", testPaymentsAll)
	t.Run("Products", testProductsAll)
	t.Run("ShopBankCards", testShopBankCardsAll)
	t.Run("Shops", testShopsAll)
	t.Run("StockKeepingUnits", testStockKeepingUnitsAll)
	t.Run("UserBankCards", testUserBankCardsAll)
	t.Run("Users", testUsersAll)
	t.Run("WarehouseBankCards", testWarehouseBankCardsAll)
	t.Run("Warehouses", testWarehousesAll)
}

func TestCount(t *testing.T) {
	t.Run("CartItems", testCartItemsCount)
	t.Run("Carts", testCartsCount)
	t.Run("Deliveries", testDeliveriesCount)
	t.Run("DeliverySessions", testDeliverySessionsCount)
	t.Run("Locations", testLocationsCount)
	t.Run("OrderItems", testOrderItemsCount)
	t.Run("OrderSessions", testOrderSessionsCount)
	t.Run("Orders", testOrdersCount)
	t.Run("Payments", testPaymentsCount)
	t.Run("Products", testProductsCount)
	t.Run("ShopBankCards", testShopBankCardsCount)
	t.Run("Shops", testShopsCount)
	t.Run("StockKeepingUnits", testStockKeepingUnitsCount)
	t.Run("UserBankCards", testUserBankCardsCount)
	t.Run("Users", testUsersCount)
	t.Run("WarehouseBankCards", testWarehouseBankCardsCount)
	t.Run("Warehouses", testWarehousesCount)
}

func TestHooks(t *testing.T) {
	t.Run("CartItems", testCartItemsHooks)
	t.Run("Carts", testCartsHooks)
	t.Run("Deliveries", testDeliveriesHooks)
	t.Run("DeliverySessions", testDeliverySessionsHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("OrderItems", testOrderItemsHooks)
	t.Run("OrderSessions", testOrderSessionsHooks)
	t.Run("Orders", testOrdersHooks)
	t.Run("Payments", testPaymentsHooks)
	t.Run("Products", testProductsHooks)
	t.Run("ShopBankCards", testShopBankCardsHooks)
	t.Run("Shops", testShopsHooks)
	t.Run("StockKeepingUnits", testStockKeepingUnitsHooks)
	t.Run("UserBankCards", testUserBankCardsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("WarehouseBankCards", testWarehouseBankCardsHooks)
	t.Run("Warehouses", testWarehousesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CartItems", testCartItemsInsert)
	t.Run("CartItems", testCartItemsInsertWhitelist)
	t.Run("Carts", testCartsInsert)
	t.Run("Carts", testCartsInsertWhitelist)
	t.Run("Deliveries", testDeliveriesInsert)
	t.Run("Deliveries", testDeliveriesInsertWhitelist)
	t.Run("DeliverySessions", testDeliverySessionsInsert)
	t.Run("DeliverySessions", testDeliverySessionsInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("OrderItems", testOrderItemsInsert)
	t.Run("OrderItems", testOrderItemsInsertWhitelist)
	t.Run("OrderSessions", testOrderSessionsInsert)
	t.Run("OrderSessions", testOrderSessionsInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("Payments", testPaymentsInsert)
	t.Run("Payments", testPaymentsInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("ShopBankCards", testShopBankCardsInsert)
	t.Run("ShopBankCards", testShopBankCardsInsertWhitelist)
	t.Run("Shops", testShopsInsert)
	t.Run("Shops", testShopsInsertWhitelist)
	t.Run("StockKeepingUnits", testStockKeepingUnitsInsert)
	t.Run("StockKeepingUnits", testStockKeepingUnitsInsertWhitelist)
	t.Run("UserBankCards", testUserBankCardsInsert)
	t.Run("UserBankCards", testUserBankCardsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("WarehouseBankCards", testWarehouseBankCardsInsert)
	t.Run("WarehouseBankCards", testWarehouseBankCardsInsertWhitelist)
	t.Run("Warehouses", testWarehousesInsert)
	t.Run("Warehouses", testWarehousesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("CartItems", testCartItemsReload)
	t.Run("Carts", testCartsReload)
	t.Run("Deliveries", testDeliveriesReload)
	t.Run("DeliverySessions", testDeliverySessionsReload)
	t.Run("Locations", testLocationsReload)
	t.Run("OrderItems", testOrderItemsReload)
	t.Run("OrderSessions", testOrderSessionsReload)
	t.Run("Orders", testOrdersReload)
	t.Run("Payments", testPaymentsReload)
	t.Run("Products", testProductsReload)
	t.Run("ShopBankCards", testShopBankCardsReload)
	t.Run("Shops", testShopsReload)
	t.Run("StockKeepingUnits", testStockKeepingUnitsReload)
	t.Run("UserBankCards", testUserBankCardsReload)
	t.Run("Users", testUsersReload)
	t.Run("WarehouseBankCards", testWarehouseBankCardsReload)
	t.Run("Warehouses", testWarehousesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CartItems", testCartItemsReloadAll)
	t.Run("Carts", testCartsReloadAll)
	t.Run("Deliveries", testDeliveriesReloadAll)
	t.Run("DeliverySessions", testDeliverySessionsReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("OrderItems", testOrderItemsReloadAll)
	t.Run("OrderSessions", testOrderSessionsReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("Payments", testPaymentsReloadAll)
	t.Run("Products", testProductsReloadAll)
	t.Run("ShopBankCards", testShopBankCardsReloadAll)
	t.Run("Shops", testShopsReloadAll)
	t.Run("StockKeepingUnits", testStockKeepingUnitsReloadAll)
	t.Run("UserBankCards", testUserBankCardsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("WarehouseBankCards", testWarehouseBankCardsReloadAll)
	t.Run("Warehouses", testWarehousesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CartItems", testCartItemsSelect)
	t.Run("Carts", testCartsSelect)
	t.Run("Deliveries", testDeliveriesSelect)
	t.Run("DeliverySessions", testDeliverySessionsSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("OrderItems", testOrderItemsSelect)
	t.Run("OrderSessions", testOrderSessionsSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("Payments", testPaymentsSelect)
	t.Run("Products", testProductsSelect)
	t.Run("ShopBankCards", testShopBankCardsSelect)
	t.Run("Shops", testShopsSelect)
	t.Run("StockKeepingUnits", testStockKeepingUnitsSelect)
	t.Run("UserBankCards", testUserBankCardsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("WarehouseBankCards", testWarehouseBankCardsSelect)
	t.Run("Warehouses", testWarehousesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CartItems", testCartItemsUpdate)
	t.Run("Carts", testCartsUpdate)
	t.Run("Deliveries", testDeliveriesUpdate)
	t.Run("DeliverySessions", testDeliverySessionsUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("OrderItems", testOrderItemsUpdate)
	t.Run("OrderSessions", testOrderSessionsUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("Payments", testPaymentsUpdate)
	t.Run("Products", testProductsUpdate)
	t.Run("ShopBankCards", testShopBankCardsUpdate)
	t.Run("Shops", testShopsUpdate)
	t.Run("StockKeepingUnits", testStockKeepingUnitsUpdate)
	t.Run("UserBankCards", testUserBankCardsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("WarehouseBankCards", testWarehouseBankCardsUpdate)
	t.Run("Warehouses", testWarehousesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CartItems", testCartItemsSliceUpdateAll)
	t.Run("Carts", testCartsSliceUpdateAll)
	t.Run("Deliveries", testDeliveriesSliceUpdateAll)
	t.Run("DeliverySessions", testDeliverySessionsSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("OrderItems", testOrderItemsSliceUpdateAll)
	t.Run("OrderSessions", testOrderSessionsSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("Payments", testPaymentsSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("ShopBankCards", testShopBankCardsSliceUpdateAll)
	t.Run("Shops", testShopsSliceUpdateAll)
	t.Run("StockKeepingUnits", testStockKeepingUnitsSliceUpdateAll)
	t.Run("UserBankCards", testUserBankCardsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("WarehouseBankCards", testWarehouseBankCardsSliceUpdateAll)
	t.Run("Warehouses", testWarehousesSliceUpdateAll)
}
