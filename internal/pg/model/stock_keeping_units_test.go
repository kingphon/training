// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStockKeepingUnits(t *testing.T) {
	t.Parallel()

	query := StockKeepingUnits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStockKeepingUnitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStockKeepingUnitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StockKeepingUnits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStockKeepingUnitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StockKeepingUnitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStockKeepingUnitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StockKeepingUnitExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StockKeepingUnit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StockKeepingUnitExists to return true, but got false.")
	}
}

func testStockKeepingUnitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stockKeepingUnitFound, err := FindStockKeepingUnit(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stockKeepingUnitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStockKeepingUnitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StockKeepingUnits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStockKeepingUnitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StockKeepingUnits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStockKeepingUnitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stockKeepingUnitOne := &StockKeepingUnit{}
	stockKeepingUnitTwo := &StockKeepingUnit{}
	if err = randomize.Struct(seed, stockKeepingUnitOne, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}
	if err = randomize.Struct(seed, stockKeepingUnitTwo, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stockKeepingUnitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stockKeepingUnitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StockKeepingUnits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStockKeepingUnitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stockKeepingUnitOne := &StockKeepingUnit{}
	stockKeepingUnitTwo := &StockKeepingUnit{}
	if err = randomize.Struct(seed, stockKeepingUnitOne, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}
	if err = randomize.Struct(seed, stockKeepingUnitTwo, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stockKeepingUnitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stockKeepingUnitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stockKeepingUnitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func stockKeepingUnitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StockKeepingUnit) error {
	*o = StockKeepingUnit{}
	return nil
}

func testStockKeepingUnitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StockKeepingUnit{}
	o := &StockKeepingUnit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit object: %s", err)
	}

	AddStockKeepingUnitHook(boil.BeforeInsertHook, stockKeepingUnitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitBeforeInsertHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.AfterInsertHook, stockKeepingUnitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitAfterInsertHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.AfterSelectHook, stockKeepingUnitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitAfterSelectHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.BeforeUpdateHook, stockKeepingUnitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitBeforeUpdateHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.AfterUpdateHook, stockKeepingUnitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitAfterUpdateHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.BeforeDeleteHook, stockKeepingUnitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitBeforeDeleteHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.AfterDeleteHook, stockKeepingUnitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitAfterDeleteHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.BeforeUpsertHook, stockKeepingUnitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitBeforeUpsertHooks = []StockKeepingUnitHook{}

	AddStockKeepingUnitHook(boil.AfterUpsertHook, stockKeepingUnitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stockKeepingUnitAfterUpsertHooks = []StockKeepingUnitHook{}
}

func testStockKeepingUnitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStockKeepingUnitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stockKeepingUnitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStockKeepingUnitToManySkuCartItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StockKeepingUnit
	var b, c CartItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartItemDBTypes, false, cartItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SkuID, a.ID)
	queries.Assign(&c.SkuID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SkuCartItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SkuID, b.SkuID) {
			bFound = true
		}
		if queries.Equal(v.SkuID, c.SkuID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StockKeepingUnitSlice{&a}
	if err = a.L.LoadSkuCartItems(ctx, tx, false, (*[]*StockKeepingUnit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SkuCartItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SkuCartItems = nil
	if err = a.L.LoadSkuCartItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SkuCartItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStockKeepingUnitToManySkuOrderItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StockKeepingUnit
	var b, c OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SkuID, a.ID)
	queries.Assign(&c.SkuID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SkuOrderItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SkuID, b.SkuID) {
			bFound = true
		}
		if queries.Equal(v.SkuID, c.SkuID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StockKeepingUnitSlice{&a}
	if err = a.L.LoadSkuOrderItems(ctx, tx, false, (*[]*StockKeepingUnit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SkuOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SkuOrderItems = nil
	if err = a.L.LoadSkuOrderItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SkuOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStockKeepingUnitToManyAddOpSkuCartItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StockKeepingUnit
	var b, c, d, e CartItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stockKeepingUnitDBTypes, false, strmangle.SetComplement(stockKeepingUnitPrimaryKeyColumns, stockKeepingUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartItemDBTypes, false, strmangle.SetComplement(cartItemPrimaryKeyColumns, cartItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CartItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSkuCartItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SkuID) {
			t.Error("foreign key was wrong value", a.ID, first.SkuID)
		}
		if !queries.Equal(a.ID, second.SkuID) {
			t.Error("foreign key was wrong value", a.ID, second.SkuID)
		}

		if first.R.Sku != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sku != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SkuCartItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SkuCartItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SkuCartItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStockKeepingUnitToManyAddOpSkuOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StockKeepingUnit
	var b, c, d, e OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stockKeepingUnitDBTypes, false, strmangle.SetComplement(stockKeepingUnitPrimaryKeyColumns, stockKeepingUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSkuOrderItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SkuID) {
			t.Error("foreign key was wrong value", a.ID, first.SkuID)
		}
		if !queries.Equal(a.ID, second.SkuID) {
			t.Error("foreign key was wrong value", a.ID, second.SkuID)
		}

		if first.R.Sku != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sku != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SkuOrderItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SkuOrderItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SkuOrderItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStockKeepingUnitToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StockKeepingUnit
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stockKeepingUnitDBTypes, false, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StockKeepingUnitSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*StockKeepingUnit)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStockKeepingUnitToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StockKeepingUnit
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stockKeepingUnitDBTypes, false, strmangle.SetComplement(stockKeepingUnitPrimaryKeyColumns, stockKeepingUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StockKeepingUnits[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testStockKeepingUnitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStockKeepingUnitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StockKeepingUnitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStockKeepingUnitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StockKeepingUnits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stockKeepingUnitDBTypes = map[string]string{`ID`: `text`, `Name`: `text`, `Sku`: `text`, `Quantity`: `integer`, `Price`: `numeric`, `Status`: `text`, `ProductID`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                       = bytes.MinRead
)

func testStockKeepingUnitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stockKeepingUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stockKeepingUnitAllColumns) == len(stockKeepingUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStockKeepingUnitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stockKeepingUnitAllColumns) == len(stockKeepingUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StockKeepingUnit{}
	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stockKeepingUnitDBTypes, true, stockKeepingUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stockKeepingUnitAllColumns, stockKeepingUnitPrimaryKeyColumns) {
		fields = stockKeepingUnitAllColumns
	} else {
		fields = strmangle.SetComplement(
			stockKeepingUnitAllColumns,
			stockKeepingUnitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StockKeepingUnitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStockKeepingUnitsUpsert(t *testing.T) {
	t.Parallel()

	if len(stockKeepingUnitAllColumns) == len(stockKeepingUnitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StockKeepingUnit{}
	if err = randomize.Struct(seed, &o, stockKeepingUnitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StockKeepingUnit: %s", err)
	}

	count, err := StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stockKeepingUnitDBTypes, false, stockKeepingUnitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StockKeepingUnit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StockKeepingUnit: %s", err)
	}

	count, err = StockKeepingUnits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
