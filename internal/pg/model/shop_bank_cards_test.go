// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShopBankCards(t *testing.T) {
	t.Parallel()

	query := ShopBankCards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopBankCardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopBankCardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShopBankCards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopBankCardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopBankCardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopBankCardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopBankCardExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShopBankCard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopBankCardExists to return true, but got false.")
	}
}

func testShopBankCardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopBankCardFound, err := FindShopBankCard(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopBankCardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopBankCardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShopBankCards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopBankCardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShopBankCards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopBankCardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopBankCardOne := &ShopBankCard{}
	shopBankCardTwo := &ShopBankCard{}
	if err = randomize.Struct(seed, shopBankCardOne, shopBankCardDBTypes, false, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}
	if err = randomize.Struct(seed, shopBankCardTwo, shopBankCardDBTypes, false, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopBankCardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopBankCardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopBankCards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopBankCardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopBankCardOne := &ShopBankCard{}
	shopBankCardTwo := &ShopBankCard{}
	if err = randomize.Struct(seed, shopBankCardOne, shopBankCardDBTypes, false, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}
	if err = randomize.Struct(seed, shopBankCardTwo, shopBankCardDBTypes, false, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopBankCardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopBankCardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopBankCardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func shopBankCardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopBankCard) error {
	*o = ShopBankCard{}
	return nil
}

func testShopBankCardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShopBankCard{}
	o := &ShopBankCard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopBankCard object: %s", err)
	}

	AddShopBankCardHook(boil.BeforeInsertHook, shopBankCardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopBankCardBeforeInsertHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.AfterInsertHook, shopBankCardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopBankCardAfterInsertHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.AfterSelectHook, shopBankCardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopBankCardAfterSelectHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.BeforeUpdateHook, shopBankCardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopBankCardBeforeUpdateHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.AfterUpdateHook, shopBankCardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopBankCardAfterUpdateHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.BeforeDeleteHook, shopBankCardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopBankCardBeforeDeleteHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.AfterDeleteHook, shopBankCardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopBankCardAfterDeleteHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.BeforeUpsertHook, shopBankCardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopBankCardBeforeUpsertHooks = []ShopBankCardHook{}

	AddShopBankCardHook(boil.AfterUpsertHook, shopBankCardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopBankCardAfterUpsertHooks = []ShopBankCardHook{}
}

func testShopBankCardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopBankCardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopBankCardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopBankCardToOneShopUsingShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShopBankCard
	var foreign Shop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shopBankCardDBTypes, false, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShopID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShopHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShopBankCardSlice{&local}
	if err = local.L.LoadShop(ctx, tx, false, (*[]*ShopBankCard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shop = nil
	if err = local.L.LoadShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShopBankCardToOneSetOpShopUsingShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopBankCard
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopBankCardDBTypes, false, strmangle.SetComplement(shopBankCardPrimaryKeyColumns, shopBankCardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shop{&b, &c} {
		err = a.SetShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShopBankCards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShopID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopID))
		reflect.Indirect(reflect.ValueOf(&a.ShopID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShopID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopID, x.ID)
		}
	}
}

func testShopBankCardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopBankCardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopBankCardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopBankCardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopBankCards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopBankCardDBTypes = map[string]string{`ID`: `text`, `Number`: `text`, `ShopID`: `text`, `IsDefault`: `boolean`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testShopBankCardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopBankCardAllColumns) == len(shopBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopBankCardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopBankCardAllColumns) == len(shopBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopBankCard{}
	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopBankCardDBTypes, true, shopBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopBankCardAllColumns, shopBankCardPrimaryKeyColumns) {
		fields = shopBankCardAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopBankCardAllColumns,
			shopBankCardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopBankCardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopBankCardsUpsert(t *testing.T) {
	t.Parallel()

	if len(shopBankCardAllColumns) == len(shopBankCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShopBankCard{}
	if err = randomize.Struct(seed, &o, shopBankCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopBankCard: %s", err)
	}

	count, err := ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopBankCardDBTypes, false, shopBankCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopBankCard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopBankCard: %s", err)
	}

	count, err = ShopBankCards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
