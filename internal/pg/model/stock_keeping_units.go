// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StockKeepingUnit is an object representing the database table.
type StockKeepingUnit struct {
	ID        null.String     `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Name      null.String     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Sku       null.String     `boil:"sku" json:"sku" toml:"sku" yaml:"sku"`
	Quantity  null.Int        `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Price     decimal.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	Status    null.String     `boil:"status" json:"status" toml:"status" yaml:"status"`
	ProductID null.String     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	CreatedAt null.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *stockKeepingUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockKeepingUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockKeepingUnitColumns = struct {
	ID        string
	Name      string
	Sku       string
	Quantity  string
	Price     string
	Status    string
	ProductID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "_id",
	Name:      "name",
	Sku:       "sku",
	Quantity:  "quantity",
	Price:     "price",
	Status:    "status",
	ProductID: "product_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var StockKeepingUnitTableColumns = struct {
	ID        string
	Name      string
	Sku       string
	Quantity  string
	Price     string
	Status    string
	ProductID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "stock_keeping_units._id",
	Name:      "stock_keeping_units.name",
	Sku:       "stock_keeping_units.sku",
	Quantity:  "stock_keeping_units.quantity",
	Price:     "stock_keeping_units.price",
	Status:    "stock_keeping_units.status",
	ProductID: "stock_keeping_units.product_id",
	CreatedAt: "stock_keeping_units.created_at",
	UpdatedAt: "stock_keeping_units.updated_at",
}

// Generated where

var StockKeepingUnitWhere = struct {
	ID        whereHelpernull_String
	Name      whereHelpernull_String
	Sku       whereHelpernull_String
	Quantity  whereHelpernull_Int
	Price     whereHelperdecimal_Decimal
	Status    whereHelpernull_String
	ProductID whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelpernull_String{field: "\"stock_keeping_units\".\"_id\""},
	Name:      whereHelpernull_String{field: "\"stock_keeping_units\".\"name\""},
	Sku:       whereHelpernull_String{field: "\"stock_keeping_units\".\"sku\""},
	Quantity:  whereHelpernull_Int{field: "\"stock_keeping_units\".\"quantity\""},
	Price:     whereHelperdecimal_Decimal{field: "\"stock_keeping_units\".\"price\""},
	Status:    whereHelpernull_String{field: "\"stock_keeping_units\".\"status\""},
	ProductID: whereHelpernull_String{field: "\"stock_keeping_units\".\"product_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"stock_keeping_units\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"stock_keeping_units\".\"updated_at\""},
}

// StockKeepingUnitRels is where relationship names are stored.
var StockKeepingUnitRels = struct {
	Product       string
	SkuCartItems  string
	SkuOrderItems string
}{
	Product:       "Product",
	SkuCartItems:  "SkuCartItems",
	SkuOrderItems: "SkuOrderItems",
}

// stockKeepingUnitR is where relationships are stored.
type stockKeepingUnitR struct {
	Product       *Product       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	SkuCartItems  CartItemSlice  `boil:"SkuCartItems" json:"SkuCartItems" toml:"SkuCartItems" yaml:"SkuCartItems"`
	SkuOrderItems OrderItemSlice `boil:"SkuOrderItems" json:"SkuOrderItems" toml:"SkuOrderItems" yaml:"SkuOrderItems"`
}

// NewStruct creates a new relationship struct
func (*stockKeepingUnitR) NewStruct() *stockKeepingUnitR {
	return &stockKeepingUnitR{}
}

func (r *stockKeepingUnitR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *stockKeepingUnitR) GetSkuCartItems() CartItemSlice {
	if r == nil {
		return nil
	}
	return r.SkuCartItems
}

func (r *stockKeepingUnitR) GetSkuOrderItems() OrderItemSlice {
	if r == nil {
		return nil
	}
	return r.SkuOrderItems
}

// stockKeepingUnitL is where Load methods for each relationship are stored.
type stockKeepingUnitL struct{}

var (
	stockKeepingUnitAllColumns            = []string{"_id", "name", "sku", "quantity", "price", "status", "product_id", "created_at", "updated_at"}
	stockKeepingUnitColumnsWithoutDefault = []string{"_id", "name", "sku", "quantity", "price", "status", "product_id", "created_at", "updated_at"}
	stockKeepingUnitColumnsWithDefault    = []string{}
	stockKeepingUnitPrimaryKeyColumns     = []string{"_id"}
	stockKeepingUnitGeneratedColumns      = []string{}
)

type (
	// StockKeepingUnitSlice is an alias for a slice of pointers to StockKeepingUnit.
	// This should almost always be used instead of []StockKeepingUnit.
	StockKeepingUnitSlice []*StockKeepingUnit
	// StockKeepingUnitHook is the signature for custom StockKeepingUnit hook methods
	StockKeepingUnitHook func(context.Context, boil.ContextExecutor, *StockKeepingUnit) error

	stockKeepingUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockKeepingUnitType                 = reflect.TypeOf(&StockKeepingUnit{})
	stockKeepingUnitMapping              = queries.MakeStructMapping(stockKeepingUnitType)
	stockKeepingUnitPrimaryKeyMapping, _ = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, stockKeepingUnitPrimaryKeyColumns)
	stockKeepingUnitInsertCacheMut       sync.RWMutex
	stockKeepingUnitInsertCache          = make(map[string]insertCache)
	stockKeepingUnitUpdateCacheMut       sync.RWMutex
	stockKeepingUnitUpdateCache          = make(map[string]updateCache)
	stockKeepingUnitUpsertCacheMut       sync.RWMutex
	stockKeepingUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockKeepingUnitAfterSelectMu sync.Mutex
var stockKeepingUnitAfterSelectHooks []StockKeepingUnitHook

var stockKeepingUnitBeforeInsertMu sync.Mutex
var stockKeepingUnitBeforeInsertHooks []StockKeepingUnitHook
var stockKeepingUnitAfterInsertMu sync.Mutex
var stockKeepingUnitAfterInsertHooks []StockKeepingUnitHook

var stockKeepingUnitBeforeUpdateMu sync.Mutex
var stockKeepingUnitBeforeUpdateHooks []StockKeepingUnitHook
var stockKeepingUnitAfterUpdateMu sync.Mutex
var stockKeepingUnitAfterUpdateHooks []StockKeepingUnitHook

var stockKeepingUnitBeforeDeleteMu sync.Mutex
var stockKeepingUnitBeforeDeleteHooks []StockKeepingUnitHook
var stockKeepingUnitAfterDeleteMu sync.Mutex
var stockKeepingUnitAfterDeleteHooks []StockKeepingUnitHook

var stockKeepingUnitBeforeUpsertMu sync.Mutex
var stockKeepingUnitBeforeUpsertHooks []StockKeepingUnitHook
var stockKeepingUnitAfterUpsertMu sync.Mutex
var stockKeepingUnitAfterUpsertHooks []StockKeepingUnitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockKeepingUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockKeepingUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockKeepingUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockKeepingUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockKeepingUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockKeepingUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockKeepingUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockKeepingUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockKeepingUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockKeepingUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockKeepingUnitHook registers your hook function for all future operations.
func AddStockKeepingUnitHook(hookPoint boil.HookPoint, stockKeepingUnitHook StockKeepingUnitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stockKeepingUnitAfterSelectMu.Lock()
		stockKeepingUnitAfterSelectHooks = append(stockKeepingUnitAfterSelectHooks, stockKeepingUnitHook)
		stockKeepingUnitAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		stockKeepingUnitBeforeInsertMu.Lock()
		stockKeepingUnitBeforeInsertHooks = append(stockKeepingUnitBeforeInsertHooks, stockKeepingUnitHook)
		stockKeepingUnitBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		stockKeepingUnitAfterInsertMu.Lock()
		stockKeepingUnitAfterInsertHooks = append(stockKeepingUnitAfterInsertHooks, stockKeepingUnitHook)
		stockKeepingUnitAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		stockKeepingUnitBeforeUpdateMu.Lock()
		stockKeepingUnitBeforeUpdateHooks = append(stockKeepingUnitBeforeUpdateHooks, stockKeepingUnitHook)
		stockKeepingUnitBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		stockKeepingUnitAfterUpdateMu.Lock()
		stockKeepingUnitAfterUpdateHooks = append(stockKeepingUnitAfterUpdateHooks, stockKeepingUnitHook)
		stockKeepingUnitAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		stockKeepingUnitBeforeDeleteMu.Lock()
		stockKeepingUnitBeforeDeleteHooks = append(stockKeepingUnitBeforeDeleteHooks, stockKeepingUnitHook)
		stockKeepingUnitBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		stockKeepingUnitAfterDeleteMu.Lock()
		stockKeepingUnitAfterDeleteHooks = append(stockKeepingUnitAfterDeleteHooks, stockKeepingUnitHook)
		stockKeepingUnitAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		stockKeepingUnitBeforeUpsertMu.Lock()
		stockKeepingUnitBeforeUpsertHooks = append(stockKeepingUnitBeforeUpsertHooks, stockKeepingUnitHook)
		stockKeepingUnitBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		stockKeepingUnitAfterUpsertMu.Lock()
		stockKeepingUnitAfterUpsertHooks = append(stockKeepingUnitAfterUpsertHooks, stockKeepingUnitHook)
		stockKeepingUnitAfterUpsertMu.Unlock()
	}
}

// One returns a single stockKeepingUnit record from the query.
func (q stockKeepingUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StockKeepingUnit, error) {
	o := &StockKeepingUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for stock_keeping_units")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockKeepingUnit records from the query.
func (q stockKeepingUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (StockKeepingUnitSlice, error) {
	var o []*StockKeepingUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to StockKeepingUnit slice")
	}

	if len(stockKeepingUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockKeepingUnit records in the query.
func (q stockKeepingUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count stock_keeping_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockKeepingUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if stock_keeping_units exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *StockKeepingUnit) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// SkuCartItems retrieves all the cart_item's CartItems with an executor via sku_id column.
func (o *StockKeepingUnit) SkuCartItems(mods ...qm.QueryMod) cartItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cart_items\".\"sku_id\"=?", o.ID),
	)

	return CartItems(queryMods...)
}

// SkuOrderItems retrieves all the order_item's OrderItems with an executor via sku_id column.
func (o *StockKeepingUnit) SkuOrderItems(mods ...qm.QueryMod) orderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_items\".\"sku_id\"=?", o.ID),
	)

	return OrderItems(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockKeepingUnitL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		var ok bool
		object, ok = maybeStockKeepingUnit.(*StockKeepingUnit)
		if !ok {
			object = new(StockKeepingUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStockKeepingUnit))
			}
		}
	} else {
		s, ok := maybeStockKeepingUnit.(*[]*StockKeepingUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStockKeepingUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		if !queries.IsNil(object.ProductID) {
			args[object.ProductID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}

			if !queries.IsNil(obj.ProductID) {
				args[obj.ProductID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.StockKeepingUnits = append(foreign.R.StockKeepingUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.StockKeepingUnits = append(foreign.R.StockKeepingUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadSkuCartItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuCartItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		var ok bool
		object, ok = maybeStockKeepingUnit.(*StockKeepingUnit)
		if !ok {
			object = new(StockKeepingUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStockKeepingUnit))
			}
		}
	} else {
		s, ok := maybeStockKeepingUnit.(*[]*StockKeepingUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStockKeepingUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cart_items`),
		qm.WhereIn(`cart_items.sku_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cart_items")
	}

	var resultSlice []*CartItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cart_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cart_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cart_items")
	}

	if len(cartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuCartItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartItemR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SkuID) {
				local.R.SkuCartItems = append(local.R.SkuCartItems, foreign)
				if foreign.R == nil {
					foreign.R = &cartItemR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockKeepingUnitL) LoadSkuOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStockKeepingUnit interface{}, mods queries.Applicator) error {
	var slice []*StockKeepingUnit
	var object *StockKeepingUnit

	if singular {
		var ok bool
		object, ok = maybeStockKeepingUnit.(*StockKeepingUnit)
		if !ok {
			object = new(StockKeepingUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStockKeepingUnit))
			}
		}
	} else {
		s, ok := maybeStockKeepingUnit.(*[]*StockKeepingUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStockKeepingUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStockKeepingUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stockKeepingUnitR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockKeepingUnitR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.sku_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_items")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if len(orderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuOrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SkuID) {
				local.R.SkuOrderItems = append(local.R.SkuOrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the stockKeepingUnit to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.StockKeepingUnits.
func (o *StockKeepingUnit) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockKeepingUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &stockKeepingUnitR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			StockKeepingUnits: StockKeepingUnitSlice{o},
		}
	} else {
		related.R.StockKeepingUnits = append(related.R.StockKeepingUnits, o)
	}

	return nil
}

// AddSkuCartItems adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuCartItems.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuCartItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SkuID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cart_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, cartItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ShopID, rel.CartID, rel.ProductID, rel.SkuID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SkuID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuCartItems: related,
		}
	} else {
		o.R.SkuCartItems = append(o.R.SkuCartItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartItemR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuOrderItems adds the given related objects to the existing relationships
// of the stock_keeping_unit, optionally inserting them as new records.
// Appends related to o.R.SkuOrderItems.
// Sets related.R.Sku appropriately.
func (o *StockKeepingUnit) AddSkuOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SkuID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrderID, rel.ProductID, rel.SkuID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SkuID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &stockKeepingUnitR{
			SkuOrderItems: related,
		}
	} else {
		o.R.SkuOrderItems = append(o.R.SkuOrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// StockKeepingUnits retrieves all the records using an executor.
func StockKeepingUnits(mods ...qm.QueryMod) stockKeepingUnitQuery {
	mods = append(mods, qm.From("\"stock_keeping_units\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stock_keeping_units\".*"})
	}

	return stockKeepingUnitQuery{q}
}

// FindStockKeepingUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockKeepingUnit(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*StockKeepingUnit, error) {
	stockKeepingUnitObj := &StockKeepingUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stock_keeping_units\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stockKeepingUnitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from stock_keeping_units")
	}

	if err = stockKeepingUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stockKeepingUnitObj, err
	}

	return stockKeepingUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockKeepingUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no stock_keeping_units provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockKeepingUnitInsertCacheMut.RLock()
	cache, cached := stockKeepingUnitInsertCache[key]
	stockKeepingUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitColumnsWithDefault,
			stockKeepingUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stock_keeping_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stock_keeping_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitInsertCacheMut.Lock()
		stockKeepingUnitInsertCache[key] = cache
		stockKeepingUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StockKeepingUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockKeepingUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockKeepingUnitUpdateCacheMut.RLock()
	cache, cached := stockKeepingUnitUpdateCache[key]
	stockKeepingUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update stock_keeping_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stock_keeping_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockKeepingUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, append(wl, stockKeepingUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update stock_keeping_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitUpdateCacheMut.Lock()
		stockKeepingUnitUpdateCache[key] = cache
		stockKeepingUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockKeepingUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for stock_keeping_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockKeepingUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stock_keeping_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockKeepingUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in stockKeepingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all stockKeepingUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockKeepingUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no stock_keeping_units provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockKeepingUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockKeepingUnitUpsertCacheMut.RLock()
	cache, cached := stockKeepingUnitUpsertCache[key]
	stockKeepingUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitColumnsWithDefault,
			stockKeepingUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stockKeepingUnitAllColumns,
			stockKeepingUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert stock_keeping_units, could not build update column list")
		}

		ret := strmangle.SetComplement(stockKeepingUnitAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stockKeepingUnitPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert stock_keeping_units, could not build conflict column list")
			}

			conflict = make([]string, len(stockKeepingUnitPrimaryKeyColumns))
			copy(conflict, stockKeepingUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stock_keeping_units\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockKeepingUnitType, stockKeepingUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert stock_keeping_units")
	}

	if !cached {
		stockKeepingUnitUpsertCacheMut.Lock()
		stockKeepingUnitUpsertCache[key] = cache
		stockKeepingUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StockKeepingUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockKeepingUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no StockKeepingUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockKeepingUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"stock_keeping_units\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for stock_keeping_units")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockKeepingUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no stockKeepingUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from stock_keeping_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for stock_keeping_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockKeepingUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockKeepingUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stock_keeping_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from stockKeepingUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for stock_keeping_units")
	}

	if len(stockKeepingUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockKeepingUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStockKeepingUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockKeepingUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockKeepingUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockKeepingUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stock_keeping_units\".* FROM \"stock_keeping_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockKeepingUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in StockKeepingUnitSlice")
	}

	*o = slice

	return nil
}

// StockKeepingUnitExists checks if the StockKeepingUnit row exists.
func StockKeepingUnitExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stock_keeping_units\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if stock_keeping_units exists")
	}

	return exists, nil
}

// Exists checks if the StockKeepingUnit row exists.
func (o *StockKeepingUnit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StockKeepingUnitExists(ctx, exec, o.ID)
}
