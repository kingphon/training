// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWarehouses(t *testing.T) {
	t.Parallel()

	query := Warehouses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWarehousesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Warehouses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WarehouseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Warehouse exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WarehouseExists to return true, but got false.")
	}
}

func testWarehousesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	warehouseFound, err := FindWarehouse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if warehouseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWarehousesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Warehouses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWarehousesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Warehouses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWarehousesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	warehouseOne := &Warehouse{}
	warehouseTwo := &Warehouse{}
	if err = randomize.Struct(seed, warehouseOne, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseTwo, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Warehouses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWarehousesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	warehouseOne := &Warehouse{}
	warehouseTwo := &Warehouse{}
	if err = randomize.Struct(seed, warehouseOne, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseTwo, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func warehouseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func testWarehousesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Warehouse{}
	o := &Warehouse{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, warehouseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Warehouse object: %s", err)
	}

	AddWarehouseHook(boil.BeforeInsertHook, warehouseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeInsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterInsertHook, warehouseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	warehouseAfterInsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterSelectHook, warehouseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	warehouseAfterSelectHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeUpdateHook, warehouseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeUpdateHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterUpdateHook, warehouseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseAfterUpdateHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeDeleteHook, warehouseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeDeleteHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterDeleteHook, warehouseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseAfterDeleteHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeUpsertHook, warehouseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeUpsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterUpsertHook, warehouseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseAfterUpsertHooks = []WarehouseHook{}
}

func testWarehousesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehousesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(warehouseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehouseToManyDeliveries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WarehouseID, a.ID)
	queries.Assign(&c.WarehouseID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Deliveries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WarehouseID, b.WarehouseID) {
			bFound = true
		}
		if queries.Equal(v.WarehouseID, c.WarehouseID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadDeliveries(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Deliveries = nil
	if err = a.L.LoadDeliveries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyDestinationWarehouseOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DestinationWarehouseID, a.ID)
	queries.Assign(&c.DestinationWarehouseID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DestinationWarehouseOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DestinationWarehouseID, b.DestinationWarehouseID) {
			bFound = true
		}
		if queries.Equal(v.DestinationWarehouseID, c.DestinationWarehouseID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadDestinationWarehouseOrders(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationWarehouseOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DestinationWarehouseOrders = nil
	if err = a.L.LoadDestinationWarehouseOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationWarehouseOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WarehouseID, a.ID)
	queries.Assign(&c.WarehouseID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WarehouseID, b.WarehouseID) {
			bFound = true
		}
		if queries.Equal(v.WarehouseID, c.WarehouseID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WarehouseID, a.ID)
	queries.Assign(&c.WarehouseID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Products().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WarehouseID, b.WarehouseID) {
			bFound = true
		}
		if queries.Equal(v.WarehouseID, c.WarehouseID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadProducts(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyWarehouseBankCards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c WarehouseBankCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, warehouseBankCardDBTypes, false, warehouseBankCardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseBankCardDBTypes, false, warehouseBankCardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WarehouseID, a.ID)
	queries.Assign(&c.WarehouseID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WarehouseBankCards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WarehouseID, b.WarehouseID) {
			bFound = true
		}
		if queries.Equal(v.WarehouseID, c.WarehouseID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadWarehouseBankCards(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseBankCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WarehouseBankCards = nil
	if err = a.L.LoadWarehouseBankCards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseBankCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyAddOpDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Delivery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, first.WarehouseID)
		}
		if !queries.Equal(a.ID, second.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, second.WarehouseID)
		}

		if first.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Deliveries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Deliveries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Deliveries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWarehouseToManyAddOpDestinationWarehouseOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDestinationWarehouseOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DestinationWarehouseID) {
			t.Error("foreign key was wrong value", a.ID, first.DestinationWarehouseID)
		}
		if !queries.Equal(a.ID, second.DestinationWarehouseID) {
			t.Error("foreign key was wrong value", a.ID, second.DestinationWarehouseID)
		}

		if first.R.DestinationWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DestinationWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DestinationWarehouseOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DestinationWarehouseOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DestinationWarehouseOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWarehouseToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, first.WarehouseID)
		}
		if !queries.Equal(a.ID, second.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, second.WarehouseID)
		}

		if first.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWarehouseToManyAddOpProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, first.WarehouseID)
		}
		if !queries.Equal(a.ID, second.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, second.WarehouseID)
		}

		if first.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWarehouseToManyAddOpWarehouseBankCards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e WarehouseBankCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WarehouseBankCard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseBankCardDBTypes, false, strmangle.SetComplement(warehouseBankCardPrimaryKeyColumns, warehouseBankCardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WarehouseBankCard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWarehouseBankCards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, first.WarehouseID)
		}
		if !queries.Equal(a.ID, second.WarehouseID) {
			t.Error("foreign key was wrong value", a.ID, second.WarehouseID)
		}

		if first.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Warehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WarehouseBankCards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WarehouseBankCards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WarehouseBankCards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWarehouseToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Warehouse
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WarehouseSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWarehouseToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Warehouses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testWarehousesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehousesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehousesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Warehouses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	warehouseDBTypes = map[string]string{`ID`: `text`, `Name`: `text`, `Address`: `text`, `Status`: `text`, `UserID`: `text`, `Cash`: `numeric`, `Latitude`: `numeric`, `Longitude`: `numeric`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testWarehousesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWarehousesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(warehouseAllColumns, warehousePrimaryKeyColumns) {
		fields = warehouseAllColumns
	} else {
		fields = strmangle.SetComplement(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WarehouseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWarehousesUpsert(t *testing.T) {
	t.Parallel()

	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Warehouse{}
	if err = randomize.Struct(seed, &o, warehouseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Warehouse: %s", err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, warehouseDBTypes, false, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Warehouse: %s", err)
	}

	count, err = Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
