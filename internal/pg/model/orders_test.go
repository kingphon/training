// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrders(t *testing.T) {
	t.Parallel()

	query := Orders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Orders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Order exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderExists to return true, but got false.")
	}
}

func testOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderFound, err := FindOrder(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Orders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Orders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Orders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func testOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Order{}
	o := &Order{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Order object: %s", err)
	}

	AddOrderHook(boil.BeforeInsertHook, orderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterInsertHook, orderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderAfterInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterSelectHook, orderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderAfterSelectHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpdateHook, orderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpdateHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpdateHook, orderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderAfterUpdateHooks = []OrderHook{}

	AddOrderHook(boil.BeforeDeleteHook, orderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderBeforeDeleteHooks = []OrderHook{}

	AddOrderHook(boil.AfterDeleteHook, orderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderAfterDeleteHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpsertHook, orderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpsertHook, orderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderAfterUpsertHooks = []OrderHook{}
}

func testOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderToManyOrderItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderID, a.ID)
	queries.Assign(&c.OrderID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderID, b.OrderID) {
			bFound = true
		}
		if queries.Equal(v.OrderID, c.OrderID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderItems(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderItems = nil
	if err = a.L.LoadOrderItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyAddOpOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderID)
		}
		if !queries.Equal(a.ID, second.OrderID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderID)
		}

		if first.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrderToOneDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Delivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deliveryDBTypes, false, deliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeliveryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDeliveryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Delivery) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneWarehouseUsingDestinationWarehouse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Warehouse

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DestinationWarehouseID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DestinationWarehouse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWarehouseHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadDestinationWarehouse(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DestinationWarehouse = nil
	if err = local.L.LoadDestinationWarehouse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOnePaymentUsingPayment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Payment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PaymentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Payment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPaymentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadPayment(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Payment = nil
	if err = local.L.LoadPayment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneShopUsingShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Shop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Shop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShopID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShopHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Shop) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadShop(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shop = nil
	if err = local.L.LoadShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shop == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneWarehouseUsingWarehouse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Warehouse

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WarehouseID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Warehouse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWarehouseHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadWarehouse(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Warehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Warehouse = nil
	if err = local.L.LoadWarehouse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Warehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneSetOpDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Delivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deliveryDBTypes, false, strmangle.SetComplement(deliveryPrimaryKeyColumns, deliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Delivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeliveryID))
		reflect.Indirect(reflect.ValueOf(&a.DeliveryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID, x.ID)
		}
	}
}
func testOrderToOneSetOpWarehouseUsingDestinationWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Warehouse{&b, &c} {
		err = a.SetDestinationWarehouse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DestinationWarehouse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DestinationWarehouseOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DestinationWarehouseID, x.ID) {
			t.Error("foreign key was wrong value", a.DestinationWarehouseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DestinationWarehouseID))
		reflect.Indirect(reflect.ValueOf(&a.DestinationWarehouseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DestinationWarehouseID, x.ID) {
			t.Error("foreign key was wrong value", a.DestinationWarehouseID, x.ID)
		}
	}
}
func testOrderToOneSetOpPaymentUsingPayment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Payment{&b, &c} {
		err = a.SetPayment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Payment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PaymentID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PaymentID))
		reflect.Indirect(reflect.ValueOf(&a.PaymentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PaymentID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentID, x.ID)
		}
	}
}
func testOrderToOneSetOpShopUsingShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Shop{&b, &c} {
		err = a.SetShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShopID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopID))
		reflect.Indirect(reflect.ValueOf(&a.ShopID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShopID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopID, x.ID)
		}
	}
}
func testOrderToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testOrderToOneSetOpWarehouseUsingWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Warehouse{&b, &c} {
		err = a.SetWarehouse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Warehouse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Orders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WarehouseID, x.ID) {
			t.Error("foreign key was wrong value", a.WarehouseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WarehouseID))
		reflect.Indirect(reflect.ValueOf(&a.WarehouseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WarehouseID, x.ID) {
			t.Error("foreign key was wrong value", a.WarehouseID, x.ID)
		}
	}
}

func testOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Orders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderDBTypes = map[string]string{`ID`: `text`, `Code`: `text`, `Amount`: `numeric`, `Note`: `text`, `Priority`: `text`, `Status`: `text`, `UserID`: `text`, `ShopID`: `text`, `WarehouseID`: `text`, `DestinationWarehouseID`: `text`, `DeliveryID`: `text`, `PaymentID`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testOrdersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDBTypes, true, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDBTypes, true, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderAllColumns, orderPrimaryKeyColumns) {
		fields = orderAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrdersUpsert(t *testing.T) {
	t.Parallel()

	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Order{}
	if err = randomize.Struct(seed, &o, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderDBTypes, false, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err = Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
