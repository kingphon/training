// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Order is an object representing the database table.
type Order struct {
	ID                     null.String     `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Code                   null.String     `boil:"code" json:"code" toml:"code" yaml:"code"`
	Amount                 decimal.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Note                   null.String     `boil:"note" json:"note" toml:"note" yaml:"note"`
	Priority               null.String     `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`
	Status                 null.String     `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserID                 null.String     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ShopID                 null.String     `boil:"shop_id" json:"shop_id" toml:"shop_id" yaml:"shop_id"`
	WarehouseID            null.String     `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	DestinationWarehouseID null.String     `boil:"destination_warehouse_id" json:"destination_warehouse_id" toml:"destination_warehouse_id" yaml:"destination_warehouse_id"`
	DeliveryID             null.String     `boil:"delivery_id" json:"delivery_id" toml:"delivery_id" yaml:"delivery_id"`
	PaymentID              null.String     `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	CreatedAt              null.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              null.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *orderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderColumns = struct {
	ID                     string
	Code                   string
	Amount                 string
	Note                   string
	Priority               string
	Status                 string
	UserID                 string
	ShopID                 string
	WarehouseID            string
	DestinationWarehouseID string
	DeliveryID             string
	PaymentID              string
	CreatedAt              string
	UpdatedAt              string
}{
	ID:                     "_id",
	Code:                   "code",
	Amount:                 "amount",
	Note:                   "note",
	Priority:               "priority",
	Status:                 "status",
	UserID:                 "user_id",
	ShopID:                 "shop_id",
	WarehouseID:            "warehouse_id",
	DestinationWarehouseID: "destination_warehouse_id",
	DeliveryID:             "delivery_id",
	PaymentID:              "payment_id",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
}

var OrderTableColumns = struct {
	ID                     string
	Code                   string
	Amount                 string
	Note                   string
	Priority               string
	Status                 string
	UserID                 string
	ShopID                 string
	WarehouseID            string
	DestinationWarehouseID string
	DeliveryID             string
	PaymentID              string
	CreatedAt              string
	UpdatedAt              string
}{
	ID:                     "orders._id",
	Code:                   "orders.code",
	Amount:                 "orders.amount",
	Note:                   "orders.note",
	Priority:               "orders.priority",
	Status:                 "orders.status",
	UserID:                 "orders.user_id",
	ShopID:                 "orders.shop_id",
	WarehouseID:            "orders.warehouse_id",
	DestinationWarehouseID: "orders.destination_warehouse_id",
	DeliveryID:             "orders.delivery_id",
	PaymentID:              "orders.payment_id",
	CreatedAt:              "orders.created_at",
	UpdatedAt:              "orders.updated_at",
}

// Generated where

var OrderWhere = struct {
	ID                     whereHelpernull_String
	Code                   whereHelpernull_String
	Amount                 whereHelperdecimal_Decimal
	Note                   whereHelpernull_String
	Priority               whereHelpernull_String
	Status                 whereHelpernull_String
	UserID                 whereHelpernull_String
	ShopID                 whereHelpernull_String
	WarehouseID            whereHelpernull_String
	DestinationWarehouseID whereHelpernull_String
	DeliveryID             whereHelpernull_String
	PaymentID              whereHelpernull_String
	CreatedAt              whereHelpernull_Time
	UpdatedAt              whereHelpernull_Time
}{
	ID:                     whereHelpernull_String{field: "\"orders\".\"_id\""},
	Code:                   whereHelpernull_String{field: "\"orders\".\"code\""},
	Amount:                 whereHelperdecimal_Decimal{field: "\"orders\".\"amount\""},
	Note:                   whereHelpernull_String{field: "\"orders\".\"note\""},
	Priority:               whereHelpernull_String{field: "\"orders\".\"priority\""},
	Status:                 whereHelpernull_String{field: "\"orders\".\"status\""},
	UserID:                 whereHelpernull_String{field: "\"orders\".\"user_id\""},
	ShopID:                 whereHelpernull_String{field: "\"orders\".\"shop_id\""},
	WarehouseID:            whereHelpernull_String{field: "\"orders\".\"warehouse_id\""},
	DestinationWarehouseID: whereHelpernull_String{field: "\"orders\".\"destination_warehouse_id\""},
	DeliveryID:             whereHelpernull_String{field: "\"orders\".\"delivery_id\""},
	PaymentID:              whereHelpernull_String{field: "\"orders\".\"payment_id\""},
	CreatedAt:              whereHelpernull_Time{field: "\"orders\".\"created_at\""},
	UpdatedAt:              whereHelpernull_Time{field: "\"orders\".\"updated_at\""},
}

// OrderRels is where relationship names are stored.
var OrderRels = struct {
	Delivery             string
	DestinationWarehouse string
	Payment              string
	Shop                 string
	User                 string
	Warehouse            string
	OrderItems           string
}{
	Delivery:             "Delivery",
	DestinationWarehouse: "DestinationWarehouse",
	Payment:              "Payment",
	Shop:                 "Shop",
	User:                 "User",
	Warehouse:            "Warehouse",
	OrderItems:           "OrderItems",
}

// orderR is where relationships are stored.
type orderR struct {
	Delivery             *Delivery      `boil:"Delivery" json:"Delivery" toml:"Delivery" yaml:"Delivery"`
	DestinationWarehouse *Warehouse     `boil:"DestinationWarehouse" json:"DestinationWarehouse" toml:"DestinationWarehouse" yaml:"DestinationWarehouse"`
	Payment              *Payment       `boil:"Payment" json:"Payment" toml:"Payment" yaml:"Payment"`
	Shop                 *Shop          `boil:"Shop" json:"Shop" toml:"Shop" yaml:"Shop"`
	User                 *User          `boil:"User" json:"User" toml:"User" yaml:"User"`
	Warehouse            *Warehouse     `boil:"Warehouse" json:"Warehouse" toml:"Warehouse" yaml:"Warehouse"`
	OrderItems           OrderItemSlice `boil:"OrderItems" json:"OrderItems" toml:"OrderItems" yaml:"OrderItems"`
}

// NewStruct creates a new relationship struct
func (*orderR) NewStruct() *orderR {
	return &orderR{}
}

func (r *orderR) GetDelivery() *Delivery {
	if r == nil {
		return nil
	}
	return r.Delivery
}

func (r *orderR) GetDestinationWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.DestinationWarehouse
}

func (r *orderR) GetPayment() *Payment {
	if r == nil {
		return nil
	}
	return r.Payment
}

func (r *orderR) GetShop() *Shop {
	if r == nil {
		return nil
	}
	return r.Shop
}

func (r *orderR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *orderR) GetWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.Warehouse
}

func (r *orderR) GetOrderItems() OrderItemSlice {
	if r == nil {
		return nil
	}
	return r.OrderItems
}

// orderL is where Load methods for each relationship are stored.
type orderL struct{}

var (
	orderAllColumns            = []string{"_id", "code", "amount", "note", "priority", "status", "user_id", "shop_id", "warehouse_id", "destination_warehouse_id", "delivery_id", "payment_id", "created_at", "updated_at"}
	orderColumnsWithoutDefault = []string{"_id", "code", "amount", "note", "priority", "status", "user_id", "shop_id", "warehouse_id", "destination_warehouse_id", "delivery_id", "payment_id", "created_at", "updated_at"}
	orderColumnsWithDefault    = []string{}
	orderPrimaryKeyColumns     = []string{"_id"}
	orderGeneratedColumns      = []string{}
)

type (
	// OrderSlice is an alias for a slice of pointers to Order.
	// This should almost always be used instead of []Order.
	OrderSlice []*Order
	// OrderHook is the signature for custom Order hook methods
	OrderHook func(context.Context, boil.ContextExecutor, *Order) error

	orderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderType                 = reflect.TypeOf(&Order{})
	orderMapping              = queries.MakeStructMapping(orderType)
	orderPrimaryKeyMapping, _ = queries.BindMapping(orderType, orderMapping, orderPrimaryKeyColumns)
	orderInsertCacheMut       sync.RWMutex
	orderInsertCache          = make(map[string]insertCache)
	orderUpdateCacheMut       sync.RWMutex
	orderUpdateCache          = make(map[string]updateCache)
	orderUpsertCacheMut       sync.RWMutex
	orderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderAfterSelectMu sync.Mutex
var orderAfterSelectHooks []OrderHook

var orderBeforeInsertMu sync.Mutex
var orderBeforeInsertHooks []OrderHook
var orderAfterInsertMu sync.Mutex
var orderAfterInsertHooks []OrderHook

var orderBeforeUpdateMu sync.Mutex
var orderBeforeUpdateHooks []OrderHook
var orderAfterUpdateMu sync.Mutex
var orderAfterUpdateHooks []OrderHook

var orderBeforeDeleteMu sync.Mutex
var orderBeforeDeleteHooks []OrderHook
var orderAfterDeleteMu sync.Mutex
var orderAfterDeleteHooks []OrderHook

var orderBeforeUpsertMu sync.Mutex
var orderBeforeUpsertHooks []OrderHook
var orderAfterUpsertMu sync.Mutex
var orderAfterUpsertHooks []OrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Order) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Order) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Order) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Order) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Order) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Order) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Order) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Order) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Order) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderHook registers your hook function for all future operations.
func AddOrderHook(hookPoint boil.HookPoint, orderHook OrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderAfterSelectMu.Lock()
		orderAfterSelectHooks = append(orderAfterSelectHooks, orderHook)
		orderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderBeforeInsertMu.Lock()
		orderBeforeInsertHooks = append(orderBeforeInsertHooks, orderHook)
		orderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderAfterInsertMu.Lock()
		orderAfterInsertHooks = append(orderAfterInsertHooks, orderHook)
		orderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderBeforeUpdateMu.Lock()
		orderBeforeUpdateHooks = append(orderBeforeUpdateHooks, orderHook)
		orderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderAfterUpdateMu.Lock()
		orderAfterUpdateHooks = append(orderAfterUpdateHooks, orderHook)
		orderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderBeforeDeleteMu.Lock()
		orderBeforeDeleteHooks = append(orderBeforeDeleteHooks, orderHook)
		orderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderAfterDeleteMu.Lock()
		orderAfterDeleteHooks = append(orderAfterDeleteHooks, orderHook)
		orderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderBeforeUpsertMu.Lock()
		orderBeforeUpsertHooks = append(orderBeforeUpsertHooks, orderHook)
		orderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderAfterUpsertMu.Lock()
		orderAfterUpsertHooks = append(orderAfterUpsertHooks, orderHook)
		orderAfterUpsertMu.Unlock()
	}
}

// One returns a single order record from the query.
func (q orderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Order, error) {
	o := &Order{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for orders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Order records from the query.
func (q orderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderSlice, error) {
	var o []*Order

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to Order slice")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Order records in the query.
func (q orderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count orders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if orders exists")
	}

	return count > 0, nil
}

// Delivery pointed to by the foreign key.
func (o *Order) Delivery(mods ...qm.QueryMod) deliveryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.DeliveryID),
	}

	queryMods = append(queryMods, mods...)

	return Deliveries(queryMods...)
}

// DestinationWarehouse pointed to by the foreign key.
func (o *Order) DestinationWarehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.DestinationWarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// Payment pointed to by the foreign key.
func (o *Order) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	return Payments(queryMods...)
}

// Shop pointed to by the foreign key.
func (o *Order) Shop(mods ...qm.QueryMod) shopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.ShopID),
	}

	queryMods = append(queryMods, mods...)

	return Shops(queryMods...)
}

// User pointed to by the foreign key.
func (o *Order) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Warehouse pointed to by the foreign key.
func (o *Order) Warehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.WarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// OrderItems retrieves all the order_item's OrderItems with an executor.
func (o *Order) OrderItems(mods ...qm.QueryMod) orderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_items\".\"order_id\"=?", o.ID),
	)

	return OrderItems(queryMods...)
}

// LoadDelivery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadDelivery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.DeliveryID) {
			args[object.DeliveryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.DeliveryID) {
				args[obj.DeliveryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Delivery")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Delivery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Delivery = foreign
		if foreign.R == nil {
			foreign.R = &deliveryR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeliveryID, foreign.ID) {
				local.R.Delivery = foreign
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadDestinationWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadDestinationWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.DestinationWarehouseID) {
			args[object.DestinationWarehouseID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.DestinationWarehouseID) {
				args[obj.DestinationWarehouseID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DestinationWarehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.DestinationWarehouseOrders = append(foreign.R.DestinationWarehouseOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DestinationWarehouseID, foreign.ID) {
				local.R.DestinationWarehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.DestinationWarehouseOrders = append(foreign.R.DestinationWarehouseOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.PaymentID) {
			args[object.PaymentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.PaymentID) {
				args[obj.PaymentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentID, foreign.ID) {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadShop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadShop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.ShopID) {
			args[object.ShopID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.ShopID) {
				args[obj.ShopID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shops`),
		qm.WhereIn(`shops._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Shop")
	}

	var resultSlice []*Shop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Shop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shops")
	}

	if len(shopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shop = foreign
		if foreign.R == nil {
			foreign.R = &shopR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShopID, foreign.ID) {
				local.R.Shop = foreign
				if foreign.R == nil {
					foreign.R = &shopR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.WarehouseID) {
			args[object.WarehouseID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			if !queries.IsNil(obj.WarehouseID) {
				args[obj.WarehouseID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Warehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WarehouseID, foreign.ID) {
				local.R.Warehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_items")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if len(orderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.OrderItems = append(local.R.OrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// SetDelivery of the order to the related item.
// Sets o.R.Delivery to related.
// Adds o to related.R.Orders.
func (o *Order) SetDelivery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Delivery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeliveryID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Delivery: related,
		}
	} else {
		o.R.Delivery = related
	}

	if related.R == nil {
		related.R = &deliveryR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// SetDestinationWarehouse of the order to the related item.
// Sets o.R.DestinationWarehouse to related.
// Adds o to related.R.DestinationWarehouseOrders.
func (o *Order) SetDestinationWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"destination_warehouse_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DestinationWarehouseID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			DestinationWarehouse: related,
		}
	} else {
		o.R.DestinationWarehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			DestinationWarehouseOrders: OrderSlice{o},
		}
	} else {
		related.R.DestinationWarehouseOrders = append(related.R.DestinationWarehouseOrders, o)
	}

	return nil
}

// SetPayment of the order to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.Orders.
func (o *Order) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payment_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// SetShop of the order to the related item.
// Sets o.R.Shop to related.
// Adds o to related.R.Orders.
func (o *Order) SetShop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Shop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shop_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShopID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Shop: related,
		}
	} else {
		o.R.Shop = related
	}

	if related.R == nil {
		related.R = &shopR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// SetUser of the order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Orders.
func (o *Order) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// SetWarehouse of the order to the related item.
// Sets o.R.Warehouse to related.
// Adds o to related.R.Orders.
func (o *Order) SetWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WarehouseID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Warehouse: related,
		}
	} else {
		o.R.Warehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// AddOrderItems adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderItems.
// Sets related.R.Order appropriately.
func (o *Order) AddOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrderID, rel.ProductID, rel.SkuID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderItems: related,
		}
	} else {
		o.R.OrderItems = append(o.R.OrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// Orders retrieves all the records using an executor.
func Orders(mods ...qm.QueryMod) orderQuery {
	mods = append(mods, qm.From("\"orders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".*"})
	}

	return orderQuery{q}
}

// FindOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrder(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*Order, error) {
	orderObj := &Order{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from orders")
	}

	if err = orderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderObj, err
	}

	return orderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Order) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no orders provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderInsertCacheMut.RLock()
	cache, cached := orderInsertCache[key]
	orderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderType, orderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into orders")
	}

	if !cached {
		orderInsertCacheMut.Lock()
		orderInsertCache[key] = cache
		orderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Order.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Order) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderUpdateCacheMut.RLock()
	cache, cached := orderUpdateCache[key]
	orderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update orders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, append(wl, orderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update orders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for orders")
	}

	if !cached {
		orderUpdateCacheMut.Lock()
		orderUpdateCache[key] = cache
		orderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for orders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all order")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Order) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no orders provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderUpsertCacheMut.RLock()
	cache, cached := orderUpsertCache[key]
	orderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert orders, could not build update column list")
		}

		ret := strmangle.SetComplement(orderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderPrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert orders, could not build conflict column list")
			}

			conflict = make([]string, len(orderPrimaryKeyColumns))
			copy(conflict, orderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderType, orderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert orders")
	}

	if !cached {
		orderUpsertCacheMut.Lock()
		orderUpsertCache[key] = cache
		orderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Order record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Order) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no Order provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for orders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no orderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for orders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for orders")
	}

	if len(orderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Order) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".* FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in OrderSlice")
	}

	*o = slice

	return nil
}

// OrderExists checks if the Order row exists.
func OrderExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if orders exists")
	}

	return exists, nil
}

// Exists checks if the Order row exists.
func (o *Order) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderExists(ctx, exec, o.ID)
}
