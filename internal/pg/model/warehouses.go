// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelpg

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Warehouse is an object representing the database table.
type Warehouse struct {
	ID        null.String     `boil:"_id" json:"_id" toml:"_id" yaml:"_id"`
	Name      null.String     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Address   null.String     `boil:"address" json:"address" toml:"address" yaml:"address"`
	Status    null.String     `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserID    null.String     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Cash      decimal.Decimal `boil:"cash" json:"cash" toml:"cash" yaml:"cash"`
	Latitude  decimal.Decimal `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude decimal.Decimal `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	CreatedAt null.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *warehouseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseColumns = struct {
	ID        string
	Name      string
	Address   string
	Status    string
	UserID    string
	Cash      string
	Latitude  string
	Longitude string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "_id",
	Name:      "name",
	Address:   "address",
	Status:    "status",
	UserID:    "user_id",
	Cash:      "cash",
	Latitude:  "latitude",
	Longitude: "longitude",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var WarehouseTableColumns = struct {
	ID        string
	Name      string
	Address   string
	Status    string
	UserID    string
	Cash      string
	Latitude  string
	Longitude string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "warehouses._id",
	Name:      "warehouses.name",
	Address:   "warehouses.address",
	Status:    "warehouses.status",
	UserID:    "warehouses.user_id",
	Cash:      "warehouses.cash",
	Latitude:  "warehouses.latitude",
	Longitude: "warehouses.longitude",
	CreatedAt: "warehouses.created_at",
	UpdatedAt: "warehouses.updated_at",
}

// Generated where

var WarehouseWhere = struct {
	ID        whereHelpernull_String
	Name      whereHelpernull_String
	Address   whereHelpernull_String
	Status    whereHelpernull_String
	UserID    whereHelpernull_String
	Cash      whereHelperdecimal_Decimal
	Latitude  whereHelperdecimal_Decimal
	Longitude whereHelperdecimal_Decimal
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelpernull_String{field: "\"warehouses\".\"_id\""},
	Name:      whereHelpernull_String{field: "\"warehouses\".\"name\""},
	Address:   whereHelpernull_String{field: "\"warehouses\".\"address\""},
	Status:    whereHelpernull_String{field: "\"warehouses\".\"status\""},
	UserID:    whereHelpernull_String{field: "\"warehouses\".\"user_id\""},
	Cash:      whereHelperdecimal_Decimal{field: "\"warehouses\".\"cash\""},
	Latitude:  whereHelperdecimal_Decimal{field: "\"warehouses\".\"latitude\""},
	Longitude: whereHelperdecimal_Decimal{field: "\"warehouses\".\"longitude\""},
	CreatedAt: whereHelpernull_Time{field: "\"warehouses\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"warehouses\".\"updated_at\""},
}

// WarehouseRels is where relationship names are stored.
var WarehouseRels = struct {
	User                       string
	Deliveries                 string
	DestinationWarehouseOrders string
	Orders                     string
	Products                   string
	WarehouseBankCards         string
}{
	User:                       "User",
	Deliveries:                 "Deliveries",
	DestinationWarehouseOrders: "DestinationWarehouseOrders",
	Orders:                     "Orders",
	Products:                   "Products",
	WarehouseBankCards:         "WarehouseBankCards",
}

// warehouseR is where relationships are stored.
type warehouseR struct {
	User                       *User                  `boil:"User" json:"User" toml:"User" yaml:"User"`
	Deliveries                 DeliverySlice          `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
	DestinationWarehouseOrders OrderSlice             `boil:"DestinationWarehouseOrders" json:"DestinationWarehouseOrders" toml:"DestinationWarehouseOrders" yaml:"DestinationWarehouseOrders"`
	Orders                     OrderSlice             `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
	Products                   ProductSlice           `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	WarehouseBankCards         WarehouseBankCardSlice `boil:"WarehouseBankCards" json:"WarehouseBankCards" toml:"WarehouseBankCards" yaml:"WarehouseBankCards"`
}

// NewStruct creates a new relationship struct
func (*warehouseR) NewStruct() *warehouseR {
	return &warehouseR{}
}

func (r *warehouseR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *warehouseR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}
	return r.Deliveries
}

func (r *warehouseR) GetDestinationWarehouseOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.DestinationWarehouseOrders
}

func (r *warehouseR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

func (r *warehouseR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *warehouseR) GetWarehouseBankCards() WarehouseBankCardSlice {
	if r == nil {
		return nil
	}
	return r.WarehouseBankCards
}

// warehouseL is where Load methods for each relationship are stored.
type warehouseL struct{}

var (
	warehouseAllColumns            = []string{"_id", "name", "address", "status", "user_id", "cash", "latitude", "longitude", "created_at", "updated_at"}
	warehouseColumnsWithoutDefault = []string{"_id", "name", "address", "status", "user_id", "cash", "latitude", "longitude", "created_at", "updated_at"}
	warehouseColumnsWithDefault    = []string{}
	warehousePrimaryKeyColumns     = []string{"_id"}
	warehouseGeneratedColumns      = []string{}
)

type (
	// WarehouseSlice is an alias for a slice of pointers to Warehouse.
	// This should almost always be used instead of []Warehouse.
	WarehouseSlice []*Warehouse
	// WarehouseHook is the signature for custom Warehouse hook methods
	WarehouseHook func(context.Context, boil.ContextExecutor, *Warehouse) error

	warehouseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseType                 = reflect.TypeOf(&Warehouse{})
	warehouseMapping              = queries.MakeStructMapping(warehouseType)
	warehousePrimaryKeyMapping, _ = queries.BindMapping(warehouseType, warehouseMapping, warehousePrimaryKeyColumns)
	warehouseInsertCacheMut       sync.RWMutex
	warehouseInsertCache          = make(map[string]insertCache)
	warehouseUpdateCacheMut       sync.RWMutex
	warehouseUpdateCache          = make(map[string]updateCache)
	warehouseUpsertCacheMut       sync.RWMutex
	warehouseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var warehouseAfterSelectMu sync.Mutex
var warehouseAfterSelectHooks []WarehouseHook

var warehouseBeforeInsertMu sync.Mutex
var warehouseBeforeInsertHooks []WarehouseHook
var warehouseAfterInsertMu sync.Mutex
var warehouseAfterInsertHooks []WarehouseHook

var warehouseBeforeUpdateMu sync.Mutex
var warehouseBeforeUpdateHooks []WarehouseHook
var warehouseAfterUpdateMu sync.Mutex
var warehouseAfterUpdateHooks []WarehouseHook

var warehouseBeforeDeleteMu sync.Mutex
var warehouseBeforeDeleteHooks []WarehouseHook
var warehouseAfterDeleteMu sync.Mutex
var warehouseAfterDeleteHooks []WarehouseHook

var warehouseBeforeUpsertMu sync.Mutex
var warehouseBeforeUpsertHooks []WarehouseHook
var warehouseAfterUpsertMu sync.Mutex
var warehouseAfterUpsertHooks []WarehouseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Warehouse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Warehouse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Warehouse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Warehouse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Warehouse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Warehouse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Warehouse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Warehouse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Warehouse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWarehouseHook registers your hook function for all future operations.
func AddWarehouseHook(hookPoint boil.HookPoint, warehouseHook WarehouseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		warehouseAfterSelectMu.Lock()
		warehouseAfterSelectHooks = append(warehouseAfterSelectHooks, warehouseHook)
		warehouseAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		warehouseBeforeInsertMu.Lock()
		warehouseBeforeInsertHooks = append(warehouseBeforeInsertHooks, warehouseHook)
		warehouseBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		warehouseAfterInsertMu.Lock()
		warehouseAfterInsertHooks = append(warehouseAfterInsertHooks, warehouseHook)
		warehouseAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		warehouseBeforeUpdateMu.Lock()
		warehouseBeforeUpdateHooks = append(warehouseBeforeUpdateHooks, warehouseHook)
		warehouseBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		warehouseAfterUpdateMu.Lock()
		warehouseAfterUpdateHooks = append(warehouseAfterUpdateHooks, warehouseHook)
		warehouseAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		warehouseBeforeDeleteMu.Lock()
		warehouseBeforeDeleteHooks = append(warehouseBeforeDeleteHooks, warehouseHook)
		warehouseBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		warehouseAfterDeleteMu.Lock()
		warehouseAfterDeleteHooks = append(warehouseAfterDeleteHooks, warehouseHook)
		warehouseAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		warehouseBeforeUpsertMu.Lock()
		warehouseBeforeUpsertHooks = append(warehouseBeforeUpsertHooks, warehouseHook)
		warehouseBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		warehouseAfterUpsertMu.Lock()
		warehouseAfterUpsertHooks = append(warehouseAfterUpsertHooks, warehouseHook)
		warehouseAfterUpsertMu.Unlock()
	}
}

// One returns a single warehouse record from the query.
func (q warehouseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Warehouse, error) {
	o := &Warehouse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: failed to execute a one query for warehouses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Warehouse records from the query.
func (q warehouseQuery) All(ctx context.Context, exec boil.ContextExecutor) (WarehouseSlice, error) {
	var o []*Warehouse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "modelpg: failed to assign all query results to Warehouse slice")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Warehouse records in the query.
func (q warehouseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to count warehouses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: failed to check if warehouses exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Warehouse) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *Warehouse) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"warehouse_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// DestinationWarehouseOrders retrieves all the order's Orders with an executor via destination_warehouse_id column.
func (o *Warehouse) DestinationWarehouseOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"destination_warehouse_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *Warehouse) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"warehouse_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Warehouse) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"warehouse_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// WarehouseBankCards retrieves all the warehouse_bank_card's WarehouseBankCards with an executor.
func (o *Warehouse) WarehouseBankCards(mods ...qm.QueryMod) warehouseBankCardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouse_bank_cards\".\"warehouse_id\"=?", o.ID),
	)

	return WarehouseBankCards(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users._id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Warehouses = append(foreign.R.Warehouses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Warehouses = append(foreign.R.Warehouses, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarehouseID) {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// LoadDestinationWarehouseOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadDestinationWarehouseOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.destination_warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationWarehouseOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.DestinationWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DestinationWarehouseID) {
				local.R.DestinationWarehouseOrders = append(local.R.DestinationWarehouseOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.DestinationWarehouse = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarehouseID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarehouseID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouseBankCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadWarehouseBankCards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouse_bank_cards`),
		qm.WhereIn(`warehouse_bank_cards.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouse_bank_cards")
	}

	var resultSlice []*WarehouseBankCard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouse_bank_cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouse_bank_cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouse_bank_cards")
	}

	if len(warehouseBankCardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarehouseBankCards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseBankCardR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarehouseID) {
				local.R.WarehouseBankCards = append(local.R.WarehouseBankCards, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseBankCardR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// SetUser of the warehouse to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Warehouses.
func (o *Warehouse) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, warehousePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &warehouseR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Warehouses: WarehouseSlice{o},
		}
	} else {
		related.R.Warehouses = append(related.R.Warehouses, o)
	}

	return nil
}

// AddDeliveries adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarehouseID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarehouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// AddDestinationWarehouseOrders adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.DestinationWarehouseOrders.
// Sets related.R.DestinationWarehouse appropriately.
func (o *Warehouse) AddDestinationWarehouseOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DestinationWarehouseID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DestinationWarehouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			DestinationWarehouseOrders: related,
		}
	} else {
		o.R.DestinationWarehouseOrders = append(o.R.DestinationWarehouseOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				DestinationWarehouse: o,
			}
		} else {
			rel.R.DestinationWarehouse = o
		}
	}
	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarehouseID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarehouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarehouseID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarehouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// AddWarehouseBankCards adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.WarehouseBankCards.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddWarehouseBankCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarehouseBankCard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarehouseID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouse_bank_cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, warehouseBankCardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarehouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			WarehouseBankCards: related,
		}
	} else {
		o.R.WarehouseBankCards = append(o.R.WarehouseBankCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseBankCardR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// Warehouses retrieves all the records using an executor.
func Warehouses(mods ...qm.QueryMod) warehouseQuery {
	mods = append(mods, qm.From("\"warehouses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouses\".*"})
	}

	return warehouseQuery{q}
}

// FindWarehouse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouse(ctx context.Context, exec boil.ContextExecutor, iD null.String, selectCols ...string) (*Warehouse, error) {
	warehouseObj := &Warehouse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouses\" where \"_id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, warehouseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelpg: unable to select from warehouses")
	}

	if err = warehouseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return warehouseObj, err
	}

	return warehouseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Warehouse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("modelpg: no warehouses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseInsertCacheMut.RLock()
	cache, cached := warehouseInsertCache[key]
	warehouseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelpg: unable to insert into warehouses")
	}

	if !cached {
		warehouseInsertCacheMut.Lock()
		warehouseInsertCache[key] = cache
		warehouseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Warehouse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Warehouse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	warehouseUpdateCacheMut.RLock()
	cache, cached := warehouseUpdateCache[key]
	warehouseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("modelpg: unable to update warehouses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehousePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, append(wl, warehousePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update warehouses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by update for warehouses")
	}

	if !cached {
		warehouseUpdateCacheMut.Lock()
		warehouseUpdateCache[key] = cache
		warehouseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all for warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected for warehouses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("modelpg: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehousePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to update all in warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to retrieve rows affected all in update all warehouse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Warehouse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("modelpg: no warehouses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseUpsertCacheMut.RLock()
	cache, cached := warehouseUpsertCache[key]
	warehouseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("modelpg: unable to upsert warehouses, could not build update column list")
		}

		ret := strmangle.SetComplement(warehouseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(warehousePrimaryKeyColumns) == 0 {
				return errors.New("modelpg: unable to upsert warehouses, could not build conflict column list")
			}

			conflict = make([]string, len(warehousePrimaryKeyColumns))
			copy(conflict, warehousePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to upsert warehouses")
	}

	if !cached {
		warehouseUpsertCacheMut.Lock()
		warehouseUpsertCache[key] = cache
		warehouseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Warehouse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Warehouse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("modelpg: no Warehouse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehousePrimaryKeyMapping)
	sql := "DELETE FROM \"warehouses\" WHERE \"_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by delete for warehouses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("modelpg: no warehouseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(warehouseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: unable to delete all from warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "modelpg: failed to get rows affected by deleteall for warehouses")
	}

	if len(warehouseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Warehouse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWarehouse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouses\".* FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "modelpg: unable to reload all in WarehouseSlice")
	}

	*o = slice

	return nil
}

// WarehouseExists checks if the Warehouse row exists.
func WarehouseExists(ctx context.Context, exec boil.ContextExecutor, iD null.String) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouses\" where \"_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelpg: unable to check if warehouses exists")
	}

	return exists, nil
}

// Exists checks if the Warehouse row exists.
func (o *Warehouse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WarehouseExists(ctx, exec, o.ID)
}
